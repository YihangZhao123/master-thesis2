
freertos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ec00  20000030  08005ec8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ec30  08005ec8  0002ec30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023045  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004520  00000000  00000000  000430a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000475c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00048b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005506  00000000  00000000  00049e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b96f  00000000  00000000  0004f386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098173  00000000  00000000  0006acf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005640  00000000  00000000  00102ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000030 	.word	0x20000030
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dc0 	.word	0x08005dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000034 	.word	0x20000034
 80001dc:	08005dc0 	.word	0x08005dc0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 ffd6 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f89e 	bl	8000624 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f872 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f002 fd00 	bl	8002ef0 <osKernelInitialize>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  subsystem();
 80004f0:	f000 ffae 	bl	8001450 <subsystem>
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f005 fc52 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800056c:	2310      	movs	r3, #16
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fa68 	bl	8001a58 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8df 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fcca 	bl	8001f48 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f8c9 	bl	8000750 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000608:	f002 f94c 	bl	80028a4 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f000 f89d 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20004960 	.word	0x20004960
 8000620:	40004400 	.word	0x40004400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a37      	ldr	r2, [pc, #220]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <MX_GPIO_Init+0xfc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <MX_GPIO_Init+0xfc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a29      	ldr	r2, [pc, #164]	; (8000720 <MX_GPIO_Init+0xfc>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_GPIO_Init+0xfc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	481d      	ldr	r0, [pc, #116]	; (8000724 <MX_GPIO_Init+0x100>)
 80006b0:	f001 f9b8 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7150 	mov.w	r1, #832	; 0x340
 80006ba:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_GPIO_Init+0x104>)
 80006bc:	f001 f9b2 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_GPIO_Init+0x104>)
 80006d8:	f001 f820 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_GPIO_Init+0x100>)
 80006f4:	f001 f812 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80006f8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0x104>)
 8000712:	f001 f803 	bl	800171c <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	40020800 	.word	0x40020800

0800072c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073e:	f000 fec7 	bl	80014d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40010000 	.word	0x40010000

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_MspInit+0x54>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <HAL_MspInit+0x54>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x54>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_MspInit+0x54>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_MspInit+0x54>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x54>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 ff91 	bl	80016c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_UART_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12b      	bne.n	800082e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x88>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_UART_MspInit+0x88>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_UART_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_UART_MspInit+0x8c>)
 800082a:	f000 ff77 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40004400 	.word	0x40004400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2019      	movs	r0, #25
 800085a:	f000 ff35 	bl	80016c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800085e:	2019      	movs	r0, #25
 8000860:	f000 ff4e 	bl	8001700 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <HAL_InitTick+0xa0>)
 800086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <HAL_InitTick+0xa0>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6453      	str	r3, [r2, #68]	; 0x44
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_InitTick+0xa0>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000880:	f107 0210 	add.w	r2, r7, #16
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fd58 	bl	8002340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000890:	f001 fd42 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8000894:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <HAL_InitTick+0xa4>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3b01      	subs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_InitTick+0xa8>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <HAL_InitTick+0xac>)
 80008a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_InitTick+0xa8>)
 80008ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_InitTick+0xa8>)
 80008b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_InitTick+0xa8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_InitTick+0xa8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <HAL_InitTick+0xa8>)
 80008c6:	f001 fd6d 	bl	80023a4 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d104      	bne.n	80008da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_InitTick+0xa8>)
 80008d2:	f001 fdc1 	bl	8002458 <HAL_TIM_Base_Start_IT>
 80008d6:	4603      	mov	r3, r0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	200049a4 	.word	0x200049a4
 80008f0:	40010000 	.word	0x40010000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000926:	f001 fdf9 	bl	800251c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200049a4 	.word	0x200049a4

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f005 f9e1 	bl	8005d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fda5 	bl	80004d8 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800099c:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 80009a0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80009a4:	2000ec30 	.word	0x2000ec30

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <write>:
#include "task.h"
#include "semphr.h"
#include "timers.h"
#include "../include/error.h"
extern SemaphoreHandle_t sem_usart;
void write(uint8_t * p,uint16_t size){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	xSemaphoreTake(sem_usart, portMAX_DELAY);
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <write+0x3c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 ff59 	bl	8003878 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2,p,size,100);
 80009c6:	887a      	ldrh	r2, [r7, #2]
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <write+0x40>)
 80009ce:	f001 ffb6 	bl	800293e <HAL_UART_Transmit>
	xSemaphoreGive(sem_usart);
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <write+0x3c>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	2300      	movs	r3, #0
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 fcd2 	bl	8003384 <xQueueGenericSend>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20004a48 	.word	0x20004a48
 80009ec:	20004960 	.word	0x20004960

080009f0 <StartTask>:
extern  SemaphoreHandle_t task_sem_Gy;
extern  SemaphoreHandle_t task_sem_getPx;


SemaphoreHandle_t sem_usart;
void StartTask(void* pdata){
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	6078      	str	r0, [r7, #4]

	sem_usart=xSemaphoreCreateBinary();
 80009f8:	2203      	movs	r2, #3
 80009fa:	2100      	movs	r1, #0
 80009fc:	2001      	movs	r0, #1
 80009fe:	f002 fc63 	bl	80032c8 <xQueueGenericCreate>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a7b      	ldr	r2, [pc, #492]	; (8000bf4 <StartTask+0x204>)
 8000a06:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(sem_usart);
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <StartTask+0x204>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	f002 fcb7 	bl	8003384 <xQueueGenericSend>
	/*
		Message Queue creation
	*/
	msg_queue_gysig=xQueueCreate(queue_length_gysig,item_size_gysig);
 8000a16:	4b78      	ldr	r3, [pc, #480]	; (8000bf8 <StartTask+0x208>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	4b77      	ldr	r3, [pc, #476]	; (8000bfc <StartTask+0x20c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f002 fc50 	bl	80032c8 <xQueueGenericCreate>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a75      	ldr	r2, [pc, #468]	; (8000c00 <StartTask+0x210>)
 8000a2c:	6013      	str	r3, [r2, #0]
	msg_queue_gxsig=xQueueCreate(queue_length_gxsig,item_size_gxsig);
 8000a2e:	4b75      	ldr	r3, [pc, #468]	; (8000c04 <StartTask+0x214>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <StartTask+0x218>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f002 fc44 	bl	80032c8 <xQueueGenericCreate>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a72      	ldr	r2, [pc, #456]	; (8000c0c <StartTask+0x21c>)
 8000a44:	6013      	str	r3, [r2, #0]
	msg_queue_absysig=xQueueCreate(queue_length_absysig,item_size_absysig);
 8000a46:	4b72      	ldr	r3, [pc, #456]	; (8000c10 <StartTask+0x220>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	4b71      	ldr	r3, [pc, #452]	; (8000c14 <StartTask+0x224>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	f002 fc38 	bl	80032c8 <xQueueGenericCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a6f      	ldr	r2, [pc, #444]	; (8000c18 <StartTask+0x228>)
 8000a5c:	6013      	str	r3, [r2, #0]
	msg_queue_absxsig=xQueueCreate(queue_length_absxsig,item_size_absxsig);
 8000a5e:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <StartTask+0x22c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <StartTask+0x230>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f002 fc2c 	bl	80032c8 <xQueueGenericCreate>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a6c      	ldr	r2, [pc, #432]	; (8000c24 <StartTask+0x234>)
 8000a74:	6013      	str	r3, [r2, #0]

		/*
		Soft Timer amd Semephore Initilization
	*/				
	task_timer_Gx=xTimerCreate(
 8000a76:	4b6c      	ldr	r3, [pc, #432]	; (8000c28 <StartTask+0x238>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a82:	486a      	ldr	r0, [pc, #424]	; (8000c2c <StartTask+0x23c>)
 8000a84:	f004 f9c6 	bl	8004e14 <xTimerCreate>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a69      	ldr	r2, [pc, #420]	; (8000c30 <StartTask+0x240>)
 8000a8c:	6013      	str	r3, [r2, #0]
											, pdTRUE
											,0
											,timer_Gx_callback
											);
	
	task_sem_Gx=xSemaphoreCreateBinary();
 8000a8e:	2203      	movs	r2, #3
 8000a90:	2100      	movs	r1, #0
 8000a92:	2001      	movs	r0, #1
 8000a94:	f002 fc18 	bl	80032c8 <xQueueGenericCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a66      	ldr	r2, [pc, #408]	; (8000c34 <StartTask+0x244>)
 8000a9c:	6013      	str	r3, [r2, #0]
	task_timer_Abs=xTimerCreate(
 8000a9e:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <StartTask+0x248>)
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aaa:	4864      	ldr	r0, [pc, #400]	; (8000c3c <StartTask+0x24c>)
 8000aac:	f004 f9b2 	bl	8004e14 <xTimerCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a63      	ldr	r2, [pc, #396]	; (8000c40 <StartTask+0x250>)
 8000ab4:	6013      	str	r3, [r2, #0]
											, pdTRUE
											,0
											,timer_Abs_callback
											);
	
	task_sem_Abs=xSemaphoreCreateBinary();
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2001      	movs	r0, #1
 8000abc:	f002 fc04 	bl	80032c8 <xQueueGenericCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a60      	ldr	r2, [pc, #384]	; (8000c44 <StartTask+0x254>)
 8000ac4:	6013      	str	r3, [r2, #0]
	task_timer_Gy=xTimerCreate(
 8000ac6:	4b60      	ldr	r3, [pc, #384]	; (8000c48 <StartTask+0x258>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ad2:	485e      	ldr	r0, [pc, #376]	; (8000c4c <StartTask+0x25c>)
 8000ad4:	f004 f99e 	bl	8004e14 <xTimerCreate>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a5d      	ldr	r2, [pc, #372]	; (8000c50 <StartTask+0x260>)
 8000adc:	6013      	str	r3, [r2, #0]
											, pdTRUE
											,0
											,timer_Gy_callback
											);
	
	task_sem_Gy=xSemaphoreCreateBinary();
 8000ade:	2203      	movs	r2, #3
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f002 fbf0 	bl	80032c8 <xQueueGenericCreate>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a5a      	ldr	r2, [pc, #360]	; (8000c54 <StartTask+0x264>)
 8000aec:	6013      	str	r3, [r2, #0]
	task_timer_getPx=xTimerCreate(
 8000aee:	4b5a      	ldr	r3, [pc, #360]	; (8000c58 <StartTask+0x268>)
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2300      	movs	r3, #0
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000afa:	4858      	ldr	r0, [pc, #352]	; (8000c5c <StartTask+0x26c>)
 8000afc:	f004 f98a 	bl	8004e14 <xTimerCreate>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a57      	ldr	r2, [pc, #348]	; (8000c60 <StartTask+0x270>)
 8000b04:	6013      	str	r3, [r2, #0]
											, pdTRUE
											,0
											,timer_getPx_callback
											);
	
	task_sem_getPx=xSemaphoreCreateBinary();
 8000b06:	2203      	movs	r2, #3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f002 fbdc 	bl	80032c8 <xQueueGenericCreate>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <StartTask+0x274>)
 8000b14:	6013      	str	r3, [r2, #0]

		
	/*
		Tasks Initilization
	*/
	xTaskCreateStatic(task_Gx
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <StartTask+0x278>)
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <StartTask+0x27c>)
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2335      	movs	r3, #53	; 0x35
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b28:	4951      	ldr	r1, [pc, #324]	; (8000c70 <StartTask+0x280>)
 8000b2a:	4852      	ldr	r0, [pc, #328]	; (8000c74 <StartTask+0x284>)
 8000b2c:	f003 f936 	bl	8003d9c <xTaskCreateStatic>
						,configMAX_PRIORITIES-3
						,task_Gx_stk,
						&tcb_Gx
						);
	
	xTaskCreateStatic(task_Abs
 8000b30:	4b51      	ldr	r3, [pc, #324]	; (8000c78 <StartTask+0x288>)
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <StartTask+0x28c>)
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	2335      	movs	r3, #53	; 0x35
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b42:	494f      	ldr	r1, [pc, #316]	; (8000c80 <StartTask+0x290>)
 8000b44:	484f      	ldr	r0, [pc, #316]	; (8000c84 <StartTask+0x294>)
 8000b46:	f003 f929 	bl	8003d9c <xTaskCreateStatic>
						,configMAX_PRIORITIES-3
						,task_Abs_stk,
						&tcb_Abs
						);
	
	xTaskCreateStatic(task_Gy
 8000b4a:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <StartTask+0x298>)
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <StartTask+0x29c>)
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2335      	movs	r3, #53	; 0x35
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5c:	494c      	ldr	r1, [pc, #304]	; (8000c90 <StartTask+0x2a0>)
 8000b5e:	484d      	ldr	r0, [pc, #308]	; (8000c94 <StartTask+0x2a4>)
 8000b60:	f003 f91c 	bl	8003d9c <xTaskCreateStatic>
						,configMAX_PRIORITIES-3
						,task_Gy_stk,
						&tcb_Gy
						);
	
	xTaskCreateStatic(task_getPx
 8000b64:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <StartTask+0x2a8>)
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <StartTask+0x2ac>)
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2335      	movs	r3, #53	; 0x35
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b76:	494a      	ldr	r1, [pc, #296]	; (8000ca0 <StartTask+0x2b0>)
 8000b78:	484a      	ldr	r0, [pc, #296]	; (8000ca4 <StartTask+0x2b4>)
 8000b7a:	f003 f90f 	bl	8003d9c <xTaskCreateStatic>

		
	/*
		Start the soft timer
	*/
	xTimerStart(task_timer_Gx, portMAX_DELAY);
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <StartTask+0x240>)
 8000b80:	681c      	ldr	r4, [r3, #0]
 8000b82:	f003 fbeb 	bl	800435c <xTaskGetTickCount>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2101      	movs	r1, #1
 8000b92:	4620      	mov	r0, r4
 8000b94:	f004 f99a 	bl	8004ecc <xTimerGenericCommand>
	xTimerStart(task_timer_Abs, portMAX_DELAY);
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <StartTask+0x250>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	f003 fbde 	bl	800435c <xTaskGetTickCount>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	4620      	mov	r0, r4
 8000bae:	f004 f98d 	bl	8004ecc <xTimerGenericCommand>
	xTimerStart(task_timer_Gy, portMAX_DELAY);
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <StartTask+0x260>)
 8000bb4:	681c      	ldr	r4, [r3, #0]
 8000bb6:	f003 fbd1 	bl	800435c <xTaskGetTickCount>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f004 f980 	bl	8004ecc <xTimerGenericCommand>
	xTimerStart(task_timer_getPx, portMAX_DELAY);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <StartTask+0x270>)
 8000bce:	681c      	ldr	r4, [r3, #0]
 8000bd0:	f003 fbc4 	bl	800435c <xTaskGetTickCount>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	4620      	mov	r0, r4
 8000be2:	f004 f973 	bl	8004ecc <xTimerGenericCommand>


	vTaskDelete(NULL);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f003 fa34 	bl	8004054 <vTaskDelete>
}		
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	20004a48 	.word	0x20004a48
 8000bf8:	2000001c 	.word	0x2000001c
 8000bfc:	20000020 	.word	0x20000020
 8000c00:	20006a58 	.word	0x20006a58
 8000c04:	20000014 	.word	0x20000014
 8000c08:	20000018 	.word	0x20000018
 8000c0c:	20006a54 	.word	0x20006a54
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000010 	.word	0x20000010
 8000c18:	20006a50 	.word	0x20006a50
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20006a4c 	.word	0x20006a4c
 8000c28:	08000f19 	.word	0x08000f19
 8000c2c:	08005dd8 	.word	0x08005dd8
 8000c30:	2000aac4 	.word	0x2000aac4
 8000c34:	2000aac0 	.word	0x2000aac0
 8000c38:	08000d21 	.word	0x08000d21
 8000c3c:	08005de4 	.word	0x08005de4
 8000c40:	20006a5c 	.word	0x20006a5c
 8000c44:	20008a60 	.word	0x20008a60
 8000c48:	08001115 	.word	0x08001115
 8000c4c:	08005df0 	.word	0x08005df0
 8000c50:	2000cb80 	.word	0x2000cb80
 8000c54:	2000cb84 	.word	0x2000cb84
 8000c58:	08001311 	.word	0x08001311
 8000c5c:	08005dfc 	.word	0x08005dfc
 8000c60:	2000eb8c 	.word	0x2000eb8c
 8000c64:	2000eb88 	.word	0x2000eb88
 8000c68:	2000aac8 	.word	0x2000aac8
 8000c6c:	20008ac0 	.word	0x20008ac0
 8000c70:	08005e08 	.word	0x08005e08
 8000c74:	08000f79 	.word	0x08000f79
 8000c78:	20008a64 	.word	0x20008a64
 8000c7c:	20006a60 	.word	0x20006a60
 8000c80:	08005e0c 	.word	0x08005e0c
 8000c84:	08000d7d 	.word	0x08000d7d
 8000c88:	2000ab24 	.word	0x2000ab24
 8000c8c:	2000ab80 	.word	0x2000ab80
 8000c90:	08005e10 	.word	0x08005e10
 8000c94:	08001175 	.word	0x08001175
 8000c98:	2000eb90 	.word	0x2000eb90
 8000c9c:	2000cb88 	.word	0x2000cb88
 8000ca0:	08005e14 	.word	0x08005e14
 8000ca4:	0800136d 	.word	0x0800136d

08000ca8 <read_channel_in_resx>:
* Soft Timer and Semaphore
*/
SemaphoreHandle_t task_sem_Abs;
TimerHandle_t task_timer_Abs;

inline static void read_channel_in_resx(QueueHandle_t src_msg_queue, size_t num, token_absxsig  dst[]){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0;i <num;++i){
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00b      	b.n	8000cd2 <read_channel_in_resx+0x2a>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		xQueueReceive(src_msg_queue,dst+i, portMAX_DELAY);		
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f002 fcf6 	bl	80036b8 <xQueueReceive>
	for(size_t i=0;i <num;++i){
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d3ef      	bcc.n	8000cba <read_channel_in_resx+0x12>
	}
} 
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <read_channel_in_resy>:

inline static void read_channel_in_resy(QueueHandle_t src_msg_queue, size_t num, token_absysig  dst[]){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0;i <num;++i){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00b      	b.n	8000d0e <read_channel_in_resy+0x2a>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		xQueueReceive(src_msg_queue,dst+i, portMAX_DELAY);		
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	4619      	mov	r1, r3
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f002 fcd8 	bl	80036b8 <xQueueReceive>
	for(size_t i=0;i <num;++i){
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3ef      	bcc.n	8000cf6 <read_channel_in_resy+0x12>
	}
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <timer_Abs_callback>:


void timer_Abs_callback(TimerHandle_t xTimer){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(task_sem_Abs);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <timer_Abs_callback+0x20>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	f002 fb27 	bl	8003384 <xQueueGenericSend>
}				
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20008a60 	.word	0x20008a60

08000d44 <combinator>:

//void func_actorName_combinator(portName[], portName_rate ....)
inline static void combinator(	
token_absxsig resx[] , const size_t resx_rate,
token_absysig resy[] , const size_t resy_rate
){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <combinator+0x34>)
 8000d58:	f000 fe64 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000d5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d60:	f000 fbd6 	bl	8001510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <combinator+0x34>)
 8000d6a:	f000 fe5b 	bl	8001a24 <HAL_GPIO_WritePin>
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40020800 	.word	0x40020800

08000d7c <task_Abs>:

			
void task_Abs(void* pdata){
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b08f      	sub	sp, #60	; 0x3c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	//array aiming to storing data from input ports
	long resx_rate = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
	token_absxsig resx[resx_rate];
 8000d88:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000d8a:	1e63      	subs	r3, r4, #1
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8e:	4623      	mov	r3, r4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f04f 0100 	mov.w	r1, #0
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	00cb      	lsls	r3, r1, #3
 8000da0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000da4:	00c2      	lsls	r2, r0, #3
 8000da6:	4623      	mov	r3, r4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f04f 0100 	mov.w	r1, #0
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	00cb      	lsls	r3, r1, #3
 8000db8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dbc:	00c2      	lsls	r2, r0, #3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dca:	466b      	mov	r3, sp
 8000dcc:	3300      	adds	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	long resy_rate = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	token_absysig resy[resy_rate];
 8000dd4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000dd6:	1e63      	subs	r3, r4, #1
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f04f 0100 	mov.w	r1, #0
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	00cb      	lsls	r3, r1, #3
 8000dec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000df0:	00c2      	lsls	r2, r0, #3
 8000df2:	4623      	mov	r3, r4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f04f 0100 	mov.w	r1, #0
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	00cb      	lsls	r3, r1, #3
 8000e04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e08:	00c2      	lsls	r2, r0, #3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	3307      	adds	r3, #7
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	ebad 0d03 	sub.w	sp, sp, r3
 8000e16:	466b      	mov	r3, sp
 8000e18:	3300      	adds	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
	char err[]="abs a\n\r";
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <task_Abs+0x10c>)
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e26:	e883 0003 	stmia.w	r3, {r0, r1}
	char err2[]="abs  b\n\r";
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <task_Abs+0x110>)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e32:	c303      	stmia	r3!, {r0, r1}
 8000e34:	701a      	strb	r2, [r3, #0]
		
	//array aiming to writing data to input ports
	while(1){
		write(err,sizeof(err));
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fdb5 	bl	80009ac <write>
		/*
		*	read from channel
		*/
		read_channel_in_resx(msg_queue_absxsig,resx_rate,resx);
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <task_Abs+0x114>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2c 	bl	8000ca8 <read_channel_in_resx>
		read_channel_in_resy(msg_queue_absysig,resy_rate,resy);
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <task_Abs+0x118>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e56:	6a3a      	ldr	r2, [r7, #32]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff43 	bl	8000ce4 <read_channel_in_resy>
		/*
		*	combinator function
		*/
		combinator(resx,resx_rate,resy,resy_rate );	
 8000e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e62:	6a3a      	ldr	r2, [r7, #32]
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	f7ff ff6d 	bl	8000d44 <combinator>
	
		/*
		*	write from channel
		*/
		write(err2,sizeof(err2));
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2109      	movs	r1, #9
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd9b 	bl	80009ac <write>
		xSemaphoreTake(task_sem_Abs, portMAX_DELAY);	
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <task_Abs+0x11c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fcfa 	bl	8003878 <xQueueSemaphoreTake>
		write(err,sizeof(err));
 8000e84:	e7d7      	b.n	8000e36 <task_Abs+0xba>
 8000e86:	bf00      	nop
 8000e88:	08005e1c 	.word	0x08005e1c
 8000e8c:	08005e24 	.word	0x08005e24
 8000e90:	20006a4c 	.word	0x20006a4c
 8000e94:	20006a50 	.word	0x20006a50
 8000e98:	20008a60 	.word	0x20008a60

08000e9c <read_channel_in_gx>:
* Soft Timer and Semaphore
*/
SemaphoreHandle_t task_sem_Gx;
TimerHandle_t task_timer_Gx;

inline static void read_channel_in_gx(QueueHandle_t src_msg_queue, size_t num, token_gxsig  dst[]){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0;i <num;++i){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00b      	b.n	8000ec6 <read_channel_in_gx+0x2a>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		xQueueReceive(src_msg_queue,dst+i, portMAX_DELAY);		
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f002 fbfc 	bl	80036b8 <xQueueReceive>
	for(size_t i=0;i <num;++i){
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3ef      	bcc.n	8000eae <read_channel_in_gx+0x12>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <write_channel_in_resx>:


inline static void write_channel_in_resx(token_absxsig src[],size_t num,QueueHandle_t dst_msg_queue){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0 ; i < num ;++i){
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00c      	b.n	8000f04 <write_channel_in_resx+0x2c>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		BaseType_t ret=	xQueueSend(dst_msg_queue,src+i,portMAX_DELAY);
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	18d1      	adds	r1, r2, r3
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f002 fa44 	bl	8003384 <xQueueGenericSend>
 8000efc:	6138      	str	r0, [r7, #16]
	for(size_t i=0 ; i < num ;++i){
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3ee      	bcc.n	8000eea <write_channel_in_resx+0x12>
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <timer_Gx_callback>:

void timer_Gx_callback(TimerHandle_t xTimer){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(task_sem_Gx);
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <timer_Gx_callback+0x20>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f002 fa2b 	bl	8003384 <xQueueGenericSend>
}				
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000aac0 	.word	0x2000aac0

08000f3c <combinator>:

//void func_actorName_combinator(portName[], portName_rate ....)
inline static void combinator(	
token_gxsig gx[] , const size_t gx_rate
 ,token_absxsig  resx[],const size_t resx_rate
){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <combinator+0x38>)
 8000f52:	f000 fd67 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000f56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f5a:	f000 fad9 	bl	8001510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <combinator+0x38>)
 8000f66:	f000 fd5d 	bl	8001a24 <HAL_GPIO_WritePin>

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020800 	.word	0x40020800

08000f78 <task_Gx>:

			
void task_Gx(void* pdata){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08d      	sub	sp, #52	; 0x34
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]


	//array aiming to storing data from input ports
	long gx_rate = 6;
 8000f80:	2306      	movs	r3, #6
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
	token_gxsig gx[gx_rate];
 8000f84:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000f86:	1e63      	subs	r3, r4, #1
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f04f 0100 	mov.w	r1, #0
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	00cb      	lsls	r3, r1, #3
 8000f9c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fa0:	00c2      	lsls	r2, r0, #3
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f04f 0100 	mov.w	r1, #0
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	00cb      	lsls	r3, r1, #3
 8000fb4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fb8:	00c2      	lsls	r2, r0, #3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	3307      	adds	r3, #7
 8000fbe:	08db      	lsrs	r3, r3, #3
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc6:	466b      	mov	r3, sp
 8000fc8:	3300      	adds	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24

		
	//array aiming to writing data to input ports
	long resx_rate = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
	token_absxsig resx[resx_rate];
 8000fd0:	6a3c      	ldr	r4, [r7, #32]
 8000fd2:	1e63      	subs	r3, r4, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f04f 0100 	mov.w	r1, #0
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	00cb      	lsls	r3, r1, #3
 8000fe8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fec:	00c2      	lsls	r2, r0, #3
 8000fee:	4623      	mov	r3, r4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f04f 0100 	mov.w	r1, #0
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	00cb      	lsls	r3, r1, #3
 8001000:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001004:	00c2      	lsls	r2, r0, #3
 8001006:	4623      	mov	r3, r4
 8001008:	3307      	adds	r3, #7
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	ebad 0d03 	sub.w	sp, sp, r3
 8001012:	466b      	mov	r3, sp
 8001014:	3300      	adds	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]

		while(1){

			char err[]="gx  a\n\r";
 8001018:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <task_Gx+0x10c>)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001022:	e883 0003 	stmia.w	r3, {r0, r1}
			char err2[]="gx  b\n\r";
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <task_Gx+0x110>)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001030:	e883 0003 	stmia.w	r3, {r0, r1}
			write(err,sizeof(err));
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2108      	movs	r1, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fcb6 	bl	80009ac <write>
		/*
		*	read from channel
		*/
		read_channel_in_gx(msg_queue_gxsig,gx_rate,gx);
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <task_Gx+0x114>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff27 	bl	8000e9c <read_channel_in_gx>
		/*
		*	combinator function
		*/

		combinator(gx,gx_rate , resx,resx_rate );	
 800104e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	f7ff ff71 	bl	8000f3c <combinator>
	
		/*
		*	write from channel
		*/
		write_channel_in_resx(resx,resx_rate,msg_queue_absxsig);
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6a39      	ldr	r1, [r7, #32]
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <task_Gx+0x118>)
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff38 	bl	8000ed8 <write_channel_in_resx>
		write(err2,sizeof(err2));
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2108      	movs	r1, #8
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc9c 	bl	80009ac <write>
		xSemaphoreTake(task_sem_Gx, portMAX_DELAY);	
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <task_Gx+0x11c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	4618      	mov	r0, r3
 800107e:	f002 fbfb 	bl	8003878 <xQueueSemaphoreTake>
		while(1){
 8001082:	e7c9      	b.n	8001018 <task_Gx+0xa0>
 8001084:	08005e30 	.word	0x08005e30
 8001088:	08005e38 	.word	0x08005e38
 800108c:	20006a54 	.word	0x20006a54
 8001090:	20006a4c 	.word	0x20006a4c
 8001094:	2000aac0 	.word	0x2000aac0

08001098 <read_channel_in_gy>:
* Soft Timer and Semaphore
*/
SemaphoreHandle_t task_sem_Gy;
TimerHandle_t task_timer_Gy;

inline static void read_channel_in_gy(QueueHandle_t src_msg_queue, size_t num, token_gysig  dst[]){
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0;i <num;++i){
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00b      	b.n	80010c2 <read_channel_in_gy+0x2a>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		xQueueReceive(src_msg_queue,dst+i, portMAX_DELAY);		
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	4413      	add	r3, r2
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	4619      	mov	r1, r3
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f002 fafe 	bl	80036b8 <xQueueReceive>
	for(size_t i=0;i <num;++i){
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3ef      	bcc.n	80010aa <read_channel_in_gy+0x12>
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <write_channel_in_resy>:


inline static void write_channel_in_resy(token_absysig src[],size_t num,QueueHandle_t dst_msg_queue){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0 ; i < num ;++i){
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00c      	b.n	8001100 <write_channel_in_resy+0x2c>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		BaseType_t ret=	xQueueSend(dst_msg_queue,src+i,portMAX_DELAY);
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	18d1      	adds	r1, r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f002 f946 	bl	8003384 <xQueueGenericSend>
 80010f8:	6138      	str	r0, [r7, #16]
	for(size_t i=0 ; i < num ;++i){
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3ee      	bcc.n	80010e6 <write_channel_in_resy+0x12>
	}
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <timer_Gy_callback>:

void timer_Gy_callback(TimerHandle_t xTimer){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(task_sem_Gy);
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <timer_Gy_callback+0x20>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	f002 f92d 	bl	8003384 <xQueueGenericSend>
}				
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000cb84 	.word	0x2000cb84

08001138 <combinator>:

//void func_actorName_combinator(portName[], portName_rate ....)
inline static void combinator(	
token_gysig gy[] , const size_t gy_rate
 ,token_absysig  resy[],const size_t resy_rate
){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <combinator+0x38>)
 800114e:	f000 fc69 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001156:	f000 f9db 	bl	8001510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <combinator+0x38>)
 8001162:	f000 fc5f 	bl	8001a24 <HAL_GPIO_WritePin>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020800 	.word	0x40020800

08001174 <task_Gy>:

			
void task_Gy(void* pdata){
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b08d      	sub	sp, #52	; 0x34
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	char err[]="gy  a\n\r";
 800117c:	4a40      	ldr	r2, [pc, #256]	; (8001280 <task_Gy+0x10c>)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	e883 0003 	stmia.w	r3, {r0, r1}
	char err2[]="gy  b\n\r";
 800118a:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <task_Gy+0x110>)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	e883 0003 	stmia.w	r3, {r0, r1}
	write(err,sizeof(err));
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2108      	movs	r1, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fc04 	bl	80009ac <write>
	//array aiming to storing data from input ports
	long gy_rate = 6;
 80011a4:	2306      	movs	r3, #6
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
	token_gysig gy[gy_rate];
 80011a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80011aa:	1e63      	subs	r3, r4, #1
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ae:	4623      	mov	r3, r4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f04f 0100 	mov.w	r1, #0
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	00cb      	lsls	r3, r1, #3
 80011c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011c4:	00c2      	lsls	r2, r0, #3
 80011c6:	4623      	mov	r3, r4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f04f 0100 	mov.w	r1, #0
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	00cb      	lsls	r3, r1, #3
 80011d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011dc:	00c2      	lsls	r2, r0, #3
 80011de:	4623      	mov	r3, r4
 80011e0:	3307      	adds	r3, #7
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	ebad 0d03 	sub.w	sp, sp, r3
 80011ea:	466b      	mov	r3, sp
 80011ec:	3300      	adds	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24

		
	//array aiming to writing data to input ports
	long resy_rate = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
	token_absysig resy[resy_rate];
 80011f4:	6a3c      	ldr	r4, [r7, #32]
 80011f6:	1e63      	subs	r3, r4, #1
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	4623      	mov	r3, r4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f04f 0100 	mov.w	r1, #0
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	00cb      	lsls	r3, r1, #3
 800120c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001210:	00c2      	lsls	r2, r0, #3
 8001212:	4623      	mov	r3, r4
 8001214:	4618      	mov	r0, r3
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	00cb      	lsls	r3, r1, #3
 8001224:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001228:	00c2      	lsls	r2, r0, #3
 800122a:	4623      	mov	r3, r4
 800122c:	3307      	adds	r3, #7
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	ebad 0d03 	sub.w	sp, sp, r3
 8001236:	466b      	mov	r3, sp
 8001238:	3300      	adds	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
		while(1){

		/*
		*	read from channel
		*/
		read_channel_in_gy(msg_queue_gysig,gy_rate,gy);
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <task_Gy+0x114>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff27 	bl	8001098 <read_channel_in_gy>
		/*
		*	combinator function
		*/

		combinator(gy,gy_rate , resy,resy_rate );	
 800124a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800124c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f7ff ff71 	bl	8001138 <combinator>

		/*
		*	write from channel
		*/
		write_channel_in_resy(resy,resy_rate,msg_queue_absysig);
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <task_Gy+0x118>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff38 	bl	80010d4 <write_channel_in_resy>
		write(err2,sizeof(err2));
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2108      	movs	r1, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fb9e 	bl	80009ac <write>
		xSemaphoreTake(task_sem_Gy, portMAX_DELAY);	
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <task_Gy+0x11c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fafd 	bl	8003878 <xQueueSemaphoreTake>
		read_channel_in_gy(msg_queue_gysig,gy_rate,gy);
 800127e:	e7dd      	b.n	800123c <task_Gy+0xc8>
 8001280:	08005e40 	.word	0x08005e40
 8001284:	08005e48 	.word	0x08005e48
 8001288:	20006a58 	.word	0x20006a58
 800128c:	20006a50 	.word	0x20006a50
 8001290:	2000cb84 	.word	0x2000cb84

08001294 <write_channel_in_gx>:
*/
SemaphoreHandle_t task_sem_getPx;
TimerHandle_t task_timer_getPx;


inline static void write_channel_in_gx(token_gxsig src[],size_t num,QueueHandle_t dst_msg_queue){
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0 ; i < num ;++i){
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00c      	b.n	80012c0 <write_channel_in_gx+0x2c>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		BaseType_t ret=	xQueueSend(dst_msg_queue,src+i,portMAX_DELAY);
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	18d1      	adds	r1, r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f002 f866 	bl	8003384 <xQueueGenericSend>
 80012b8:	6138      	str	r0, [r7, #16]
	for(size_t i=0 ; i < num ;++i){
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3ee      	bcc.n	80012a6 <write_channel_in_gx+0x12>
	}
} 
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <write_channel_in_gy>:

inline static void write_channel_in_gy(token_gysig src[],size_t num,QueueHandle_t dst_msg_queue){
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
	
	for(size_t i=0 ; i < num ;++i){
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00c      	b.n	80012fe <write_channel_in_gy+0x2c>
		// portMAX_DELAY: INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.
		// block forever
		BaseType_t ret=	xQueueSend(dst_msg_queue,src+i,portMAX_DELAY);
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	18d1      	adds	r1, r2, r3
 80012ea:	2300      	movs	r3, #0
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f002 f847 	bl	8003384 <xQueueGenericSend>
 80012f6:	6138      	str	r0, [r7, #16]
	for(size_t i=0 ; i < num ;++i){
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3ee      	bcc.n	80012e4 <write_channel_in_gy+0x12>
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <timer_getPx_callback>:

void timer_getPx_callback(TimerHandle_t xTimer){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(task_sem_getPx);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <timer_getPx_callback+0x20>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	f002 f82f 	bl	8003384 <xQueueGenericSend>
}				
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000eb88 	.word	0x2000eb88

08001334 <combinator>:

//void func_actorName_combinator(portName[], portName_rate ....)
inline static void combinator(	
token_gxsig gx[],const size_t gx_rate,
token_gysig gy[],const size_t gy_rate
){
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001342:	2201      	movs	r2, #1
 8001344:	2120      	movs	r1, #32
 8001346:	4808      	ldr	r0, [pc, #32]	; (8001368 <combinator+0x34>)
 8001348:	f000 fb6c 	bl	8001a24 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800134c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001350:	f000 f8de 	bl	8001510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8001354:	2200      	movs	r2, #0
 8001356:	2120      	movs	r1, #32
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <combinator+0x34>)
 800135a:	f000 fb63 	bl	8001a24 <HAL_GPIO_WritePin>

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020000 	.word	0x40020000

0800136c <task_getPx>:

			
void task_getPx(void* pdata){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	//array aiming to storing data from input ports
	
	//array aiming to writing data to input ports
	long gx_rate = 6;
 8001374:	2306      	movs	r3, #6
 8001376:	61bb      	str	r3, [r7, #24]
	token_gxsig gx[gx_rate];
 8001378:	69bc      	ldr	r4, [r7, #24]
 800137a:	1e63      	subs	r3, r4, #1
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	4623      	mov	r3, r4
 8001380:	4618      	mov	r0, r3
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	00cb      	lsls	r3, r1, #3
 8001390:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001394:	00c2      	lsls	r2, r0, #3
 8001396:	4623      	mov	r3, r4
 8001398:	4618      	mov	r0, r3
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	00cb      	lsls	r3, r1, #3
 80013a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013ac:	00c2      	lsls	r2, r0, #3
 80013ae:	4623      	mov	r3, r4
 80013b0:	3307      	adds	r3, #7
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	ebad 0d03 	sub.w	sp, sp, r3
 80013ba:	466b      	mov	r3, sp
 80013bc:	3300      	adds	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
	
	long gy_rate = 6;
 80013c0:	2306      	movs	r3, #6
 80013c2:	613b      	str	r3, [r7, #16]
	token_gysig gy[gy_rate];
 80013c4:	693c      	ldr	r4, [r7, #16]
 80013c6:	1e63      	subs	r3, r4, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4623      	mov	r3, r4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f04f 0100 	mov.w	r1, #0
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	00cb      	lsls	r3, r1, #3
 80013dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013e0:	00c2      	lsls	r2, r0, #3
 80013e2:	4623      	mov	r3, r4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	00cb      	lsls	r3, r1, #3
 80013f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013f8:	00c2      	lsls	r2, r0, #3
 80013fa:	4623      	mov	r3, r4
 80013fc:	3307      	adds	r3, #7
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	ebad 0d03 	sub.w	sp, sp, r3
 8001406:	466b      	mov	r3, sp
 8001408:	3300      	adds	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
		*	read from channel
		*/
		/*
		*	combinator function
		*/
		combinator(gx,gx_rate,gy,gy_rate );	
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f7ff ff8e 	bl	8001334 <combinator>
	
		/*
		*	write from channel
		*/
		write_channel_in_gx(gx,gx_rate,msg_queue_gxsig);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	4a09      	ldr	r2, [pc, #36]	; (8001444 <task_getPx+0xd8>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff37 	bl	8001294 <write_channel_in_gx>
		write_channel_in_gy(gy,gy_rate,msg_queue_gysig);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	4a07      	ldr	r2, [pc, #28]	; (8001448 <task_getPx+0xdc>)
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff4f 	bl	80012d2 <write_channel_in_gy>

		xSemaphoreTake(task_sem_getPx, portMAX_DELAY);	
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <task_getPx+0xe0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fa1b 	bl	8003878 <xQueueSemaphoreTake>
		combinator(gx,gx_rate,gy,gy_rate );	
 8001442:	e7e3      	b.n	800140c <task_getPx+0xa0>
 8001444:	20006a54 	.word	0x20006a54
 8001448:	20006a58 	.word	0x20006a58
 800144c:	2000eb88 	.word	0x2000eb88

08001450 <subsystem>:
*	StartTask stack*
********************/
extern StackType_t task_StartTask_stk[TASK_STACKSIZE]; 
extern StaticTask_t tcb_start;

int subsystem(){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af04      	add	r7, sp, #16



	xTaskCreateStatic(StartTask,
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <subsystem+0x2c>)
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <subsystem+0x30>)
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2337      	movs	r3, #55	; 0x37
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <subsystem+0x34>)
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <subsystem+0x38>)
 800146c:	f002 fc96 	bl	8003d9c <xTaskCreateStatic>
				);
				

			
			
			vTaskStartScheduler();
 8001470:	f002 fe62 	bl	8004138 <vTaskStartScheduler>
			
			return 0;
 8001474:	2300      	movs	r3, #0
}		
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200049ec 	.word	0x200049ec
 8001480:	20004a4c 	.word	0x20004a4c
 8001484:	08005e50 	.word	0x08005e50
 8001488:	080009f1 	.word	0x080009f1

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_Init+0x40>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_Init+0x40>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x40>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f8fc 	bl	80016b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff f9c2 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff f94c 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000028 	.word	0x20000028
 80014f4:	2000ebec 	.word	0x2000ebec

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000ebec 	.word	0x2000ebec

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000028 	.word	0x20000028

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff4c 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016da:	f7ff ff61 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff ffb1 	bl	800164c <NVIC_EncodePriority>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff80 	bl	80015f8 <__NVIC_SetPriority>
}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff54 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e159      	b.n	80019ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8148 	bne.w	80019e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a2 	beq.w	80019e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x202>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_GPIO_Init+0x2f4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x1fe>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x1fa>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a46      	ldr	r2, [pc, #280]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x1f6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x1f2>
 800190a:	2304      	movs	r3, #4
 800190c:	e008      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800190e:	2307      	movs	r3, #7
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001912:	2303      	movs	r3, #3
 8001914:	e004      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001916:	2302      	movs	r3, #2
 8001918:	e002      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191e:	2300      	movs	r3, #0
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f002 0203 	and.w	r2, r2, #3
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	4093      	lsls	r3, r2
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001930:	4935      	ldr	r1, [pc, #212]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001962:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x304>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x304>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	f67f aea2 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40013800 	.word	0x40013800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020c00 	.word	0x40020c00
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e264      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d075      	beq.n	8001b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a76:	4ba3      	ldr	r3, [pc, #652]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d00c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d112      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8e:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	4b99      	ldr	r3, [pc, #612]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d05b      	beq.n	8001b60 <HAL_RCC_OscConfig+0x108>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d157      	bne.n	8001b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e23f      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d106      	bne.n	8001acc <HAL_RCC_OscConfig+0x74>
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a90      	ldr	r2, [pc, #576]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e01d      	b.n	8001b08 <HAL_RCC_OscConfig+0xb0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0xb0>
 8001af0:	4b84      	ldr	r3, [pc, #528]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a83      	ldr	r2, [pc, #524]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fcf2 	bl	80014f8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fcee 	bl	80014f8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e204      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0xc0>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fcde 	bl	80014f8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fcda 	bl	80014f8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1f0      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0xe8>
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d11c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x152>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e1c4      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4952      	ldr	r1, [pc, #328]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	e03a      	b.n	8001c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_RCC_OscConfig+0x2b0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff fc93 	bl	80014f8 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fc8f 	bl	80014f8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1a5      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4940      	ldr	r1, [pc, #256]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x2b0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fc72 	bl	80014f8 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff fc6e 	bl	80014f8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e184      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x2b4>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff fc52 	bl	80014f8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fc4e 	bl	80014f8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e164      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x200>
 8001c76:	e015      	b.n	8001ca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0x2b4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fc3b 	bl	80014f8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff fc37 	bl	80014f8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e14d      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a0 	beq.w	8001df2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fbfd 	bl	80014f8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e011      	b.n	8001d26 <HAL_RCC_OscConfig+0x2ce>
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	42470000 	.word	0x42470000
 8001d0c:	42470e80 	.word	0x42470e80
 8001d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7ff fbf0 	bl	80014f8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e106      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x4e4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
 8001d3a:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a80      	ldr	r2, [pc, #512]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e01c      	b.n	8001d82 <HAL_RCC_OscConfig+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d50:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a7a      	ldr	r2, [pc, #488]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a77      	ldr	r2, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	e00b      	b.n	8001d82 <HAL_RCC_OscConfig+0x32a>
 8001d6a:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a74      	ldr	r2, [pc, #464]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a71      	ldr	r2, [pc, #452]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d015      	beq.n	8001db6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fbb5 	bl	80014f8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff fbb1 	bl	80014f8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0c5      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ee      	beq.n	8001d92 <HAL_RCC_OscConfig+0x33a>
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fb9f 	bl	80014f8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff fb9b 	bl	80014f8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0af      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ee      	bne.n	8001dbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 809b 	beq.w	8001f32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d05c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d141      	bne.n	8001e94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_OscConfig+0x4ec>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fb6f 	bl	80014f8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff fb6b 	bl	80014f8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e081      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x4ec>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fb44 	bl	80014f8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff fb40 	bl	80014f8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e056      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x41c>
 8001e92:	e04e      	b.n	8001f32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x4ec>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb2d 	bl	80014f8 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb29 	bl	80014f8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e03f      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x44a>
 8001ec0:	e037      	b.n	8001f32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e032      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_RCC_OscConfig+0x4e8>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d028      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d11a      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001efe:	4013      	ands	r3, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470060 	.word	0x42470060

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cc      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d90c      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d044      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002002:	2b03      	cmp	r3, #3
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e067      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4934      	ldr	r1, [pc, #208]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fa5e 	bl	80014f8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff fa5a 	bl	80014f8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e04f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20c      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f821 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	490a      	ldr	r1, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	5ccb      	ldrb	r3, [r1, r3]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fba8 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00
 8002104:	40023800 	.word	0x40023800
 8002108:	08005e70 	.word	0x08005e70
 800210c:	20000000 	.word	0x20000000
 8002110:	20000024 	.word	0x20000024

08002114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d00d      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x40>
 8002138:	2b08      	cmp	r3, #8
 800213a:	f200 80bd 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x34>
 8002142:	2b04      	cmp	r3, #4
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x3a>
 8002146:	e0b7      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800214a:	60bb      	str	r3, [r7, #8]
       break;
 800214c:	e0b7      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800214e:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002150:	60bb      	str	r3, [r7, #8]
      break;
 8002152:	e0b4      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002154:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800215c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04d      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	099b      	lsrs	r3, r3, #6
 8002170:	461a      	mov	r2, r3
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	ea02 0800 	and.w	r8, r2, r0
 8002182:	ea03 0901 	and.w	r9, r3, r1
 8002186:	4640      	mov	r0, r8
 8002188:	4649      	mov	r1, r9
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	014b      	lsls	r3, r1, #5
 8002194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002198:	0142      	lsls	r2, r0, #5
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	ebb0 0008 	subs.w	r0, r0, r8
 80021a2:	eb61 0109 	sbc.w	r1, r1, r9
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	018b      	lsls	r3, r1, #6
 80021b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b4:	0182      	lsls	r2, r0, #6
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	eb63 0301 	sbc.w	r3, r3, r1
 80021bc:	f04f 0000 	mov.w	r0, #0
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	00d9      	lsls	r1, r3, #3
 80021c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ca:	00d0      	lsls	r0, r2, #3
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	eb12 0208 	adds.w	r2, r2, r8
 80021d4:	eb43 0309 	adc.w	r3, r3, r9
 80021d8:	f04f 0000 	mov.w	r0, #0
 80021dc:	f04f 0100 	mov.w	r1, #0
 80021e0:	0259      	lsls	r1, r3, #9
 80021e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021e6:	0250      	lsls	r0, r2, #9
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	f7fd fff2 	bl	80001e0 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4613      	mov	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e04a      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	461a      	mov	r2, r3
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	ea02 0400 	and.w	r4, r2, r0
 800221e:	ea03 0501 	and.w	r5, r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	014b      	lsls	r3, r1, #5
 8002230:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002234:	0142      	lsls	r2, r0, #5
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	1b00      	subs	r0, r0, r4
 800223c:	eb61 0105 	sbc.w	r1, r1, r5
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	018b      	lsls	r3, r1, #6
 800224a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800224e:	0182      	lsls	r2, r0, #6
 8002250:	1a12      	subs	r2, r2, r0
 8002252:	eb63 0301 	sbc.w	r3, r3, r1
 8002256:	f04f 0000 	mov.w	r0, #0
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	00d9      	lsls	r1, r3, #3
 8002260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002264:	00d0      	lsls	r0, r2, #3
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	1912      	adds	r2, r2, r4
 800226c:	eb45 0303 	adc.w	r3, r5, r3
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	0299      	lsls	r1, r3, #10
 800227a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800227e:	0290      	lsls	r0, r2, #10
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	f7fd ffa6 	bl	80001e0 <__aeabi_uldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	60bb      	str	r3, [r7, #8]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022ba:	60bb      	str	r3, [r7, #8]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	68bb      	ldr	r3, [r7, #8]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08005e80 	.word	0x08005e80

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08005e80 	.word	0x08005e80

08002340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	220f      	movs	r2, #15
 800234e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_RCC_GetClockConfig+0x60>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0207 	and.w	r2, r3, #7
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e041      	b.n	800243a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f839 	bl	8002442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f9ca 	bl	800277c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d001      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e044      	b.n	80024fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_TIM_Base_Start_IT+0xb0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x6c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d013      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x6c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_TIM_Base_Start_IT+0xb4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x6c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_TIM_Base_Start_IT+0xb8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x6c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_TIM_Base_Start_IT+0xbc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x6c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a16      	ldr	r2, [pc, #88]	; (8002518 <HAL_TIM_Base_Start_IT+0xc0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d010      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	e007      	b.n	80024f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40014000 	.word	0x40014000

0800251c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8ee 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8e0 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8f1 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0204 	mvn.w	r2, #4
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8c4 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8b6 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8c7 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0208 	mvn.w	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f89a 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f88c 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f89d 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b10      	cmp	r3, #16
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0210 	mvn.w	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2208      	movs	r2, #8
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f870 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f862 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f873 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0201 	mvn.w	r2, #1
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe f846 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8e2 	bl	8002890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f838 	bl	8002768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b20      	cmp	r3, #32
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0220 	mvn.w	r2, #32
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8ac 	bl	800287c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <TIM_Base_SetConfig+0xe4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00f      	beq.n	80027b4 <TIM_Base_SetConfig+0x38>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d00b      	beq.n	80027b4 <TIM_Base_SetConfig+0x38>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a31      	ldr	r2, [pc, #196]	; (8002864 <TIM_Base_SetConfig+0xe8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x38>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a30      	ldr	r2, [pc, #192]	; (8002868 <TIM_Base_SetConfig+0xec>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x38>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a2f      	ldr	r2, [pc, #188]	; (800286c <TIM_Base_SetConfig+0xf0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0xe4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01b      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d017      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a22      	ldr	r2, [pc, #136]	; (8002864 <TIM_Base_SetConfig+0xe8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <TIM_Base_SetConfig+0xec>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00f      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <TIM_Base_SetConfig+0xf0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00b      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <TIM_Base_SetConfig+0xf4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <TIM_Base_SetConfig+0xf8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <TIM_Base_SetConfig+0xfc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <TIM_Base_SetConfig+0xe4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010000 	.word	0x40010000
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800
 800286c:	40000c00 	.word	0x40000c00
 8002870:	40014000 	.word	0x40014000
 8002874:	40014400 	.word	0x40014400
 8002878:	40014800 	.word	0x40014800

0800287c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e03f      	b.n	8002936 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd ff72 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f929 	bl	8002b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	d17c      	bne.n	8002a58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_UART_Transmit+0x2c>
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e075      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_UART_Transmit+0x3e>
 8002978:	2302      	movs	r3, #2
 800297a:	e06e      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2221      	movs	r2, #33	; 0x21
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fe fdb1 	bl	80014f8 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d108      	bne.n	80029c0 <HAL_UART_Transmit+0x82>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e003      	b.n	80029c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029d0:	e02a      	b.n	8002a28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f840 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e036      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3302      	adds	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e007      	b.n	8002a1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1cf      	bne.n	80029d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2140      	movs	r1, #64	; 0x40
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f810 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e006      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b090      	sub	sp, #64	; 0x40
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a72:	e050      	b.n	8002b16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d04c      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a82:	f7fe fd39 	bl	80014f8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d241      	bcs.n	8002b16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e5      	bne.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3314      	adds	r3, #20
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae6:	623a      	str	r2, [r7, #32]
 8002ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e5      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e00f      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d09f      	beq.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3740      	adds	r7, #64	; 0x40
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	b09f      	sub	sp, #124	; 0x7c
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	ea40 0301 	orr.w	r3, r0, r1
 8002b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b84:	f021 010c 	bic.w	r1, r1, #12
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	6999      	ldr	r1, [r3, #24]
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	ea40 0301 	orr.w	r3, r0, r1
 8002ba8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4bc5      	ldr	r3, [pc, #788]	; (8002ec4 <UART_SetConfig+0x384>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d004      	beq.n	8002bbe <UART_SetConfig+0x7e>
 8002bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4bc3      	ldr	r3, [pc, #780]	; (8002ec8 <UART_SetConfig+0x388>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d103      	bne.n	8002bc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bbe:	f7ff fbab 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8002bc2:	6778      	str	r0, [r7, #116]	; 0x74
 8002bc4:	e002      	b.n	8002bcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc6:	f7ff fb93 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8002bca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	f040 80b6 	bne.w	8002d44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	461c      	mov	r4, r3
 8002bdc:	f04f 0500 	mov.w	r5, #0
 8002be0:	4622      	mov	r2, r4
 8002be2:	462b      	mov	r3, r5
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	6439      	str	r1, [r7, #64]	; 0x40
 8002be8:	415b      	adcs	r3, r3
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
 8002bec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf0:	1912      	adds	r2, r2, r4
 8002bf2:	eb45 0303 	adc.w	r3, r5, r3
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c04:	00d0      	lsls	r0, r2, #3
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	1911      	adds	r1, r2, r4
 8002c0c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c0e:	416b      	adcs	r3, r5
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c20:	415b      	adcs	r3, r3
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c2c:	f7fd fad8 	bl	80001e0 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <UART_SetConfig+0x38c>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	011e      	lsls	r6, r3, #4
 8002c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c40:	461c      	mov	r4, r3
 8002c42:	f04f 0500 	mov.w	r5, #0
 8002c46:	4622      	mov	r2, r4
 8002c48:	462b      	mov	r3, r5
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c56:	1912      	adds	r2, r2, r4
 8002c58:	eb45 0303 	adc.w	r3, r5, r3
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	00d9      	lsls	r1, r3, #3
 8002c66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c6a:	00d0      	lsls	r0, r2, #3
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	1911      	adds	r1, r2, r4
 8002c72:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c74:	416b      	adcs	r3, r5
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	1891      	adds	r1, r2, r2
 8002c84:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c86:	415b      	adcs	r3, r3
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c92:	f7fd faa5 	bl	80001e0 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ecc <UART_SetConfig+0x38c>)
 8002c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	2164      	movs	r1, #100	; 0x64
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	3332      	adds	r3, #50	; 0x32
 8002cae:	4a87      	ldr	r2, [pc, #540]	; (8002ecc <UART_SetConfig+0x38c>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cbc:	441e      	add	r6, r3
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	1894      	adds	r4, r2, r2
 8002ccc:	623c      	str	r4, [r7, #32]
 8002cce:	415b      	adcs	r3, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd6:	1812      	adds	r2, r2, r0
 8002cd8:	eb41 0303 	adc.w	r3, r1, r3
 8002cdc:	f04f 0400 	mov.w	r4, #0
 8002ce0:	f04f 0500 	mov.w	r5, #0
 8002ce4:	00dd      	lsls	r5, r3, #3
 8002ce6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cea:	00d4      	lsls	r4, r2, #3
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	1814      	adds	r4, r2, r0
 8002cf2:	653c      	str	r4, [r7, #80]	; 0x50
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	61b9      	str	r1, [r7, #24]
 8002d06:	415b      	adcs	r3, r3
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d12:	f7fd fa65 	bl	80001e0 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <UART_SetConfig+0x38c>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	; 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	; 0x32
 8002d2e:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <UART_SetConfig+0x38c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4432      	add	r2, r6
 8002d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d42:	e0b9      	b.n	8002eb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	461c      	mov	r4, r3
 8002d48:	f04f 0500 	mov.w	r5, #0
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	462b      	mov	r3, r5
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d5c:	1912      	adds	r2, r2, r4
 8002d5e:	eb45 0303 	adc.w	r3, r5, r3
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	00d9      	lsls	r1, r3, #3
 8002d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d70:	00d0      	lsls	r0, r2, #3
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	eb12 0804 	adds.w	r8, r2, r4
 8002d7a:	eb43 0905 	adc.w	r9, r3, r5
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	008b      	lsls	r3, r1, #2
 8002d92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d96:	0082      	lsls	r2, r0, #2
 8002d98:	4640      	mov	r0, r8
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	f7fd fa20 	bl	80001e0 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <UART_SetConfig+0x38c>)
 8002da6:	fba3 2302 	umull	r2, r3, r3, r2
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	011e      	lsls	r6, r3, #4
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	4618      	mov	r0, r3
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1894      	adds	r4, r2, r2
 8002dbc:	60bc      	str	r4, [r7, #8]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dc6:	1812      	adds	r2, r2, r0
 8002dc8:	eb41 0303 	adc.w	r3, r1, r3
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	f04f 0500 	mov.w	r5, #0
 8002dd4:	00dd      	lsls	r5, r3, #3
 8002dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	1814      	adds	r4, r2, r0
 8002de2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002de4:	414b      	adcs	r3, r1
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	008b      	lsls	r3, r1, #2
 8002dfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e00:	0082      	lsls	r2, r0, #2
 8002e02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e06:	f7fd f9eb 	bl	80001e0 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2e:	441e      	add	r6, r3
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	4618      	mov	r0, r3
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	1894      	adds	r4, r2, r2
 8002e3e:	603c      	str	r4, [r7, #0]
 8002e40:	415b      	adcs	r3, r3
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e48:	1812      	adds	r2, r2, r0
 8002e4a:	eb41 0303 	adc.w	r3, r1, r3
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	f04f 0500 	mov.w	r5, #0
 8002e56:	00dd      	lsls	r5, r3, #3
 8002e58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e5c:	00d4      	lsls	r4, r2, #3
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	eb12 0a00 	adds.w	sl, r2, r0
 8002e66:	eb43 0b01 	adc.w	fp, r3, r1
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e82:	0082      	lsls	r2, r0, #2
 8002e84:	4650      	mov	r0, sl
 8002e86:	4659      	mov	r1, fp
 8002e88:	f7fd f9aa 	bl	80001e0 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e92:	fba3 1302 	umull	r1, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2164      	movs	r1, #100	; 0x64
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	; 0x32
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <UART_SetConfig+0x38c>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4432      	add	r2, r6
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	377c      	adds	r7, #124	; 0x7c
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40011400 	.word	0x40011400
 8002ecc:	51eb851f 	.word	0x51eb851f

08002ed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <SysTick_Handler+0x1c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ed8:	f001 fd76 	bl	80049c8 <xTaskGetSchedulerState>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ee2:	f002 fcb9 	bl	8005858 <xPortSysTickHandler>
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef6:	f3ef 8305 	mrs	r3, IPSR
 8002efa:	603b      	str	r3, [r7, #0]
  return(result);
 8002efc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f02:	f06f 0305 	mvn.w	r3, #5
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	e00c      	b.n	8002f24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <osKernelInitialize+0x44>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <osKernelInitialize+0x44>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e002      	b.n	8002f24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	2000004c 	.word	0x2000004c

08002f38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <vApplicationGetIdleTaskMemory+0x30>)
 8002f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000050 	.word	0x20000050
 8002f68:	200000ac 	.word	0x200000ac

08002f6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <vApplicationGetTimerTaskMemory+0x30>)
 8002f82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8a:	601a      	str	r2, [r3, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	200002ac 	.word	0x200002ac
 8002f9c:	20000308 	.word	0x20000308

08002fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f103 0208 	add.w	r2, r3, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 0208 	add.w	r2, r3, #8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f103 0208 	add.w	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d103      	bne.n	8003062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e00c      	b.n	800307c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3308      	adds	r3, #8
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e002      	b.n	8003070 <vListInsert+0x2e>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d2f6      	bcs.n	800306a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6892      	ldr	r2, [r2, #8]
 80030ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6852      	ldr	r2, [r2, #4]
 80030d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d103      	bne.n	80030e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003132:	f002 faff 	bl	8005734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	3b01      	subs	r3, #1
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	22ff      	movs	r2, #255	; 0xff
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d114      	bne.n	80031b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3310      	adds	r3, #16
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fa59 	bl	800464c <xTaskRemoveFromEventList>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <xQueueGenericReset+0xcc>)
 80031a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	e009      	b.n	80031c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3310      	adds	r3, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fef2 	bl	8002fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff feed 	bl	8002fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031c6:	f002 fae5 	bl	8005794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <xQueueGenericCreateStatic+0x52>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <xQueueGenericCreateStatic+0x56>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueGenericCreateStatic+0x58>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	623b      	str	r3, [r7, #32]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <xQueueGenericCreateStatic+0x7e>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <xQueueGenericCreateStatic+0x82>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <xQueueGenericCreateStatic+0x84>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	61fb      	str	r3, [r7, #28]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003276:	2350      	movs	r3, #80	; 0x50
 8003278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b50      	cmp	r3, #80	; 0x50
 800327e:	d00a      	beq.n	8003296 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61bb      	str	r3, [r7, #24]
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003296:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f83f 	bl	800333c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	613b      	str	r3, [r7, #16]
}
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3350      	adds	r3, #80	; 0x50
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fb39 	bl	8005978 <pvPortMalloc>
 8003306:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d011      	beq.n	8003332 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3350      	adds	r3, #80	; 0x50
 8003316:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003320:	79fa      	ldrb	r2, [r7, #7]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f805 	bl	800333c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003332:	69bb      	ldr	r3, [r7, #24]
	}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e002      	b.n	800335e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800336a:	2101      	movs	r1, #1
 800336c:	69b8      	ldr	r0, [r7, #24]
 800336e:	f7ff fecb 	bl	8003108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	; 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xQueueGenericSend+0x32>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <xQueueGenericSend+0x40>
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <xQueueGenericSend+0x44>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <xQueueGenericSend+0x46>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <xQueueGenericSend+0x60>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d103      	bne.n	80033f2 <xQueueGenericSend+0x6e>
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <xQueueGenericSend+0x72>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <xQueueGenericSend+0x74>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xQueueGenericSend+0x8e>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	623b      	str	r3, [r7, #32]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003412:	f001 fad9 	bl	80049c8 <xTaskGetSchedulerState>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <xQueueGenericSend+0x9e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <xQueueGenericSend+0xa2>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <xQueueGenericSend+0xa4>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xQueueGenericSend+0xbe>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	61fb      	str	r3, [r7, #28]
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003442:	f002 f977 	bl	8005734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <xQueueGenericSend+0xd4>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d129      	bne.n	80034ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800345e:	f000 fb2f 	bl	8003ac0 <prvCopyDataToQueue>
 8003462:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f8eb 	bl	800464c <xTaskRemoveFromEventList>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <xQueueGenericSend+0x1f8>)
 800347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	e00a      	b.n	80034a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <xQueueGenericSend+0x1f8>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034a4:	f002 f976 	bl	8005794 <vPortExitCritical>
				return pdPASS;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e063      	b.n	8003574 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034b2:	f002 f96f 	bl	8005794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e05c      	b.n	8003574 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f925 	bl	8004714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ce:	f002 f961 	bl	8005794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034d2:	f000 fe97 	bl	8004204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034d6:	f002 f92d 	bl	8005734 <vPortEnterCritical>
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d103      	bne.n	80034f0 <xQueueGenericSend+0x16c>
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d103      	bne.n	8003506 <xQueueGenericSend+0x182>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003506:	f002 f945 	bl	8005794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800350a:	1d3a      	adds	r2, r7, #4
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f914 	bl	8004740 <xTaskCheckForTimeOut>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d124      	bne.n	8003568 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800351e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003520:	f000 fbc6 	bl	8003cb0 <prvIsQueueFull>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d018      	beq.n	800355c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3310      	adds	r3, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f83a 	bl	80045ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fb51 	bl	8003be0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800353e:	f000 fe6f 	bl	8004220 <xTaskResumeAll>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af7c 	bne.w	8003442 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <xQueueGenericSend+0x1f8>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	e772      	b.n	8003442 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800355c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355e:	f000 fb3f 	bl	8003be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003562:	f000 fe5d 	bl	8004220 <xTaskResumeAll>
 8003566:	e76c      	b.n	8003442 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800356a:	f000 fb39 	bl	8003be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800356e:	f000 fe57 	bl	8004220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003574:	4618      	mov	r0, r3
 8003576:	3738      	adds	r7, #56	; 0x38
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b090      	sub	sp, #64	; 0x40
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <xQueueGenericSendFromISR+0x3c>
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <xQueueGenericSendFromISR+0x40>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <xQueueGenericSendFromISR+0x42>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d103      	bne.n	80035ea <xQueueGenericSendFromISR+0x6a>
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <xQueueGenericSendFromISR+0x6e>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <xQueueGenericSendFromISR+0x70>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	623b      	str	r3, [r7, #32]
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800360a:	f002 f975 	bl	80058f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800360e:	f3ef 8211 	mrs	r2, BASEPRI
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	61fa      	str	r2, [r7, #28]
 8003624:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003626:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <xQueueGenericSendFromISR+0xbc>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d12f      	bne.n	800369c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003652:	f000 fa35 	bl	8003ac0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003656:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d112      	bne.n	8003686 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	3324      	adds	r3, #36	; 0x24
 800366c:	4618      	mov	r0, r3
 800366e:	f000 ffed 	bl	800464c <xTaskRemoveFromEventList>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003686:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800368a:	3301      	adds	r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	b25a      	sxtb	r2, r3
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003696:	2301      	movs	r3, #1
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800369a:	e001      	b.n	80036a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800369c:	2300      	movs	r3, #0
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3740      	adds	r7, #64	; 0x40
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xQueueReceive+0x30>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	623b      	str	r3, [r7, #32]
}
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <xQueueReceive+0x3e>
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <xQueueReceive+0x42>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueReceive+0x44>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueReceive+0x5e>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61fb      	str	r3, [r7, #28]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003716:	f001 f957 	bl	80049c8 <xTaskGetSchedulerState>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueReceive+0x6e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xQueueReceive+0x72>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueReceive+0x74>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xQueueReceive+0x8e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61bb      	str	r3, [r7, #24]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003746:	f001 fff5 	bl	8005734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375a:	f000 fa1b 	bl	8003b94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	3310      	adds	r3, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ff6a 	bl	800464c <xTaskRemoveFromEventList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <xQueueReceive+0x1bc>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800378e:	f002 f801 	bl	8005794 <vPortExitCritical>
				return pdPASS;
 8003792:	2301      	movs	r3, #1
 8003794:	e069      	b.n	800386a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800379c:	f001 fffa 	bl	8005794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e062      	b.n	800386a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 ffb0 	bl	8004714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037b8:	f001 ffec 	bl	8005794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037bc:	f000 fd22 	bl	8004204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c0:	f001 ffb8 	bl	8005734 <vPortEnterCritical>
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x122>
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d103      	bne.n	80037f0 <xQueueReceive+0x138>
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f0:	f001 ffd0 	bl	8005794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037f4:	1d3a      	adds	r2, r7, #4
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 ff9f 	bl	8004740 <xTaskCheckForTimeOut>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d123      	bne.n	8003850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380a:	f000 fa3b 	bl	8003c84 <prvIsQueueEmpty>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fec5 	bl	80045ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 f9dc 	bl	8003be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003828:	f000 fcfa 	bl	8004220 <xTaskResumeAll>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d189      	bne.n	8003746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xQueueReceive+0x1bc>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	e780      	b.n	8003746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f9cb 	bl	8003be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800384a:	f000 fce9 	bl	8004220 <xTaskResumeAll>
 800384e:	e77a      	b.n	8003746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003852:	f000 f9c5 	bl	8003be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003856:	f000 fce3 	bl	8004220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 fa12 	bl	8003c84 <prvIsQueueEmpty>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f43f af6f 	beq.w	8003746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3730      	adds	r7, #48	; 0x30
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	; 0x38
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	61fb      	str	r3, [r7, #28]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038c8:	f001 f87e 	bl	80049c8 <xTaskGetSchedulerState>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <xQueueSemaphoreTake+0x60>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <xQueueSemaphoreTake+0x64>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <xQueueSemaphoreTake+0x66>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	61bb      	str	r3, [r7, #24]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038f8:	f001 ff1c 	bl	8005734 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d024      	beq.n	8003952 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003918:	f001 f9cc 	bl	8004cb4 <pvTaskIncrementMutexHeldCount>
 800391c:	4602      	mov	r2, r0
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00f      	beq.n	800394a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	3310      	adds	r3, #16
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fe8c 	bl	800464c <xTaskRemoveFromEventList>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800393a:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <xQueueSemaphoreTake+0x214>)
 800393c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800394a:	f001 ff23 	bl	8005794 <vPortExitCritical>
				return pdPASS;
 800394e:	2301      	movs	r3, #1
 8003950:	e097      	b.n	8003a82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	617b      	str	r3, [r7, #20]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003974:	f001 ff0e 	bl	8005794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003978:	2300      	movs	r3, #0
 800397a:	e082      	b.n	8003a82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fec4 	bl	8004714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003990:	f001 ff00 	bl	8005794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003994:	f000 fc36 	bl	8004204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003998:	f001 fecc 	bl	8005734 <vPortEnterCritical>
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d103      	bne.n	80039b2 <xQueueSemaphoreTake+0x13a>
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d103      	bne.n	80039c8 <xQueueSemaphoreTake+0x150>
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c8:	f001 fee4 	bl	8005794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039cc:	463a      	mov	r2, r7
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 feb3 	bl	8004740 <xTaskCheckForTimeOut>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d132      	bne.n	8003a46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039e2:	f000 f94f 	bl	8003c84 <prvIsQueueEmpty>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d026      	beq.n	8003a3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80039f4:	f001 fe9e 	bl	8005734 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 f801 	bl	8004a04 <xTaskPriorityInherit>
 8003a02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a04:	f001 fec6 	bl	8005794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fdcb 	bl	80045ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a18:	f000 f8e2 	bl	8003be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a1c:	f000 fc00 	bl	8004220 <xTaskResumeAll>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f47f af68 	bne.w	80038f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <xQueueSemaphoreTake+0x214>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	e75e      	b.n	80038f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a3c:	f000 f8d0 	bl	8003be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a40:	f000 fbee 	bl	8004220 <xTaskResumeAll>
 8003a44:	e758      	b.n	80038f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a48:	f000 f8ca 	bl	8003be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a4c:	f000 fbe8 	bl	8004220 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a52:	f000 f917 	bl	8003c84 <prvIsQueueEmpty>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f43f af4d 	beq.w	80038f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003a64:	f001 fe66 	bl	8005734 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a6a:	f000 f811 	bl	8003a90 <prvGetDisinheritPriorityAfterTimeout>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f89a 	bl	8004bb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a7c:	f001 fe8a 	bl	8005794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3738      	adds	r7, #56	; 0x38
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e001      	b.n	8003ab2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d14d      	bne.n	8003b82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fff2 	bl	8004ad4 <xTaskPriorityDisinherit>
 8003af0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e043      	b.n	8003b82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d119      	bne.n	8003b34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6858      	ldr	r0, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	f002 f942 	bl	8005d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d32b      	bcc.n	8003b82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	e026      	b.n	8003b82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68d8      	ldr	r0, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	f002 f928 	bl	8005d94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d207      	bcs.n	8003b70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	425b      	negs	r3, r3
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d105      	bne.n	8003b82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b8a:	697b      	ldr	r3, [r7, #20]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	441a      	add	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d303      	bcc.n	8003bc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68d9      	ldr	r1, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	f002 f8de 	bl	8005d94 <memcpy>
	}
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be8:	f001 fda4 	bl	8005734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf4:	e011      	b.n	8003c1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3324      	adds	r3, #36	; 0x24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd22 	bl	800464c <xTaskRemoveFromEventList>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c0e:	f000 fdf9 	bl	8004804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dce9      	bgt.n	8003bf6 <prvUnlockQueue+0x16>
 8003c22:	e000      	b.n	8003c26 <prvUnlockQueue+0x46>
					break;
 8003c24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	22ff      	movs	r2, #255	; 0xff
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c2e:	f001 fdb1 	bl	8005794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c32:	f001 fd7f 	bl	8005734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c3e:	e011      	b.n	8003c64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3310      	adds	r3, #16
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fcfd 	bl	800464c <xTaskRemoveFromEventList>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c58:	f000 fdd4 	bl	8004804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c5c:	7bbb      	ldrb	r3, [r7, #14]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	dce9      	bgt.n	8003c40 <prvUnlockQueue+0x60>
 8003c6c:	e000      	b.n	8003c70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	22ff      	movs	r2, #255	; 0xff
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c78:	f001 fd8c 	bl	8005794 <vPortExitCritical>
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c8c:	f001 fd52 	bl	8005734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e001      	b.n	8003ca2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ca2:	f001 fd77 	bl	8005794 <vPortExitCritical>

	return xReturn;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb8:	f001 fd3c 	bl	8005734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d102      	bne.n	8003cce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e001      	b.n	8003cd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cd2:	f001 fd5f 	bl	8005794 <vPortExitCritical>

	return xReturn;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e014      	b.n	8003d1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <vQueueAddToRegistry+0x50>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <vQueueAddToRegistry+0x50>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <vQueueAddToRegistry+0x50>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d12:	e006      	b.n	8003d22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	d9e7      	bls.n	8003cf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	2000ebf0 	.word	0x2000ebf0

08003d34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d44:	f001 fcf6 	bl	8005734 <vPortEnterCritical>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d103      	bne.n	8003d5e <vQueueWaitForMessageRestricted+0x2a>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d64:	b25b      	sxtb	r3, r3
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d103      	bne.n	8003d74 <vQueueWaitForMessageRestricted+0x40>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d74:	f001 fd0e 	bl	8005794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3324      	adds	r3, #36	; 0x24
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fc33 	bl	80045f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff26 	bl	8003be0 <prvUnlockQueue>
	}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61fb      	str	r3, [r7, #28]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de2:	235c      	movs	r3, #92	; 0x5c
 8003de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b5c      	cmp	r3, #92	; 0x5c
 8003dea:	d00a      	beq.n	8003e02 <xTaskCreateStatic+0x66>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01e      	beq.n	8003e48 <xTaskCreateStatic+0xac>
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e22:	2300      	movs	r3, #0
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f80b 	bl	8003e56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e42:	f000 f897 	bl	8003f74 <prvAddNewTaskToReadyList>
 8003e46:	e001      	b.n	8003e4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e4c:	697b      	ldr	r3, [r7, #20]
	}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	21a5      	movs	r1, #165	; 0xa5
 8003e70:	f001 ff9e 	bl	8005db0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f023 0307 	bic.w	r3, r3, #7
 8003e8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <prvInitialiseNewTask+0x58>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	617b      	str	r3, [r7, #20]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01f      	beq.n	8003ef4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e012      	b.n	8003ee0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3334      	adds	r3, #52	; 0x34
 8003eca:	460a      	mov	r2, r1
 8003ecc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d9e9      	bls.n	8003eba <prvInitialiseNewTask+0x64>
 8003ee6:	e000      	b.n	8003eea <prvInitialiseNewTask+0x94>
			{
				break;
 8003ee8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef2:	e003      	b.n	8003efc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2b37      	cmp	r3, #55	; 0x37
 8003f00:	d901      	bls.n	8003f06 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f02:	2337      	movs	r3, #55	; 0x37
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f85f 	bl	8002fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	3318      	adds	r3, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f85a 	bl	8002fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	69b8      	ldr	r0, [r7, #24]
 8003f56:	f001 fabf 	bl	80054d8 <pxPortInitialiseStack>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f7c:	f001 fbda 	bl	8005734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <prvAddNewTaskToReadyList+0xc4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a2c      	ldr	r2, [pc, #176]	; (8004038 <prvAddNewTaskToReadyList+0xc4>)
 8003f88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f8a:	4b2c      	ldr	r3, [pc, #176]	; (800403c <prvAddNewTaskToReadyList+0xc8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f92:	4a2a      	ldr	r2, [pc, #168]	; (800403c <prvAddNewTaskToReadyList+0xc8>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <prvAddNewTaskToReadyList+0xc4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d110      	bne.n	8003fc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fa0:	f000 fc54 	bl	800484c <prvInitialiseTaskLists>
 8003fa4:	e00d      	b.n	8003fc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fa6:	4b26      	ldr	r3, [pc, #152]	; (8004040 <prvAddNewTaskToReadyList+0xcc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <prvAddNewTaskToReadyList+0xc8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d802      	bhi.n	8003fc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <prvAddNewTaskToReadyList+0xc8>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <prvAddNewTaskToReadyList+0xd0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <prvAddNewTaskToReadyList+0xd0>)
 8003fca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <prvAddNewTaskToReadyList+0xd0>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <prvAddNewTaskToReadyList+0xd4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d903      	bls.n	8003fe8 <prvAddNewTaskToReadyList+0x74>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <prvAddNewTaskToReadyList+0xd4>)
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <prvAddNewTaskToReadyList+0xd8>)
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f7fe fffb 	bl	8002ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004004:	f001 fbc6 	bl	8005794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <prvAddNewTaskToReadyList+0xcc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <prvAddNewTaskToReadyList+0xc8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d207      	bcs.n	800402e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <prvAddNewTaskToReadyList+0xdc>)
 8004020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000bdc 	.word	0x20000bdc
 800403c:	20000708 	.word	0x20000708
 8004040:	20000be8 	.word	0x20000be8
 8004044:	20000bf8 	.word	0x20000bf8
 8004048:	20000be4 	.word	0x20000be4
 800404c:	2000070c 	.word	0x2000070c
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800405c:	f001 fb6a 	bl	8005734 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <vTaskDelete+0x18>
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <vTaskDelete+0xc4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	e000      	b.n	800406e <vTaskDelete+0x1a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff f81d 	bl	80030b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3318      	adds	r3, #24
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff f814 	bl	80030b4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <vTaskDelete+0xc8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <vTaskDelete+0xc8>)
 8004094:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <vTaskDelete+0xc4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d10b      	bne.n	80040b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	481e      	ldr	r0, [pc, #120]	; (8004120 <vTaskDelete+0xcc>)
 80040a8:	f7fe ffa7 	bl	8002ffa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <vTaskDelete+0xd0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <vTaskDelete+0xd0>)
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e009      	b.n	80040cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <vTaskDelete+0xd4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <vTaskDelete+0xd4>)
 80040c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fc30 	bl	8004928 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80040c8:	f000 fc5e 	bl	8004988 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80040cc:	f001 fb62 	bl	8005794 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <vTaskDelete+0xd8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <vTaskDelete+0xc4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d116      	bne.n	8004110 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <vTaskDelete+0xdc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <vTaskDelete+0xac>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60bb      	str	r3, [r7, #8]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <vTaskDelete+0xe0>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000708 	.word	0x20000708
 800411c:	20000bf8 	.word	0x20000bf8
 8004120:	20000bb0 	.word	0x20000bb0
 8004124:	20000bc4 	.word	0x20000bc4
 8004128:	20000bdc 	.word	0x20000bdc
 800412c:	20000be8 	.word	0x20000be8
 8004130:	20000c04 	.word	0x20000c04
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004146:	463a      	mov	r2, r7
 8004148:	1d39      	adds	r1, r7, #4
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fef2 	bl	8002f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004154:	6839      	ldr	r1, [r7, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	9202      	str	r2, [sp, #8]
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	460a      	mov	r2, r1
 8004166:	4921      	ldr	r1, [pc, #132]	; (80041ec <vTaskStartScheduler+0xb4>)
 8004168:	4821      	ldr	r0, [pc, #132]	; (80041f0 <vTaskStartScheduler+0xb8>)
 800416a:	f7ff fe17 	bl	8003d9c <xTaskCreateStatic>
 800416e:	4603      	mov	r3, r0
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <vTaskStartScheduler+0xbc>)
 8004172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <vTaskStartScheduler+0xbc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800417c:	2301      	movs	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e001      	b.n	8004186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800418c:	f000 fdfa 	bl	8004d84 <xTimerCreateTimerTask>
 8004190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d116      	bne.n	80041c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	613b      	str	r3, [r7, #16]
}
 80041aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <vTaskStartScheduler+0xc0>)
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <vTaskStartScheduler+0xc4>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <vTaskStartScheduler+0xc8>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041c0:	f001 fa16 	bl	80055f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041c4:	e00e      	b.n	80041e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d10a      	bne.n	80041e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	60fb      	str	r3, [r7, #12]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <vTaskStartScheduler+0xaa>
}
 80041e4:	bf00      	nop
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	08005e58 	.word	0x08005e58
 80041f0:	0800481d 	.word	0x0800481d
 80041f4:	20000c00 	.word	0x20000c00
 80041f8:	20000bfc 	.word	0x20000bfc
 80041fc:	20000be8 	.word	0x20000be8
 8004200:	20000be0 	.word	0x20000be0

08004204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <vTaskSuspendAll+0x18>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	4a03      	ldr	r2, [pc, #12]	; (800421c <vTaskSuspendAll+0x18>)
 8004210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000c04 	.word	0x20000c04

08004220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800422e:	4b42      	ldr	r3, [pc, #264]	; (8004338 <xTaskResumeAll+0x118>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <xTaskResumeAll+0x2c>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	603b      	str	r3, [r7, #0]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800424c:	f001 fa72 	bl	8005734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <xTaskResumeAll+0x118>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3b01      	subs	r3, #1
 8004256:	4a38      	ldr	r2, [pc, #224]	; (8004338 <xTaskResumeAll+0x118>)
 8004258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <xTaskResumeAll+0x118>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d162      	bne.n	8004328 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004262:	4b36      	ldr	r3, [pc, #216]	; (800433c <xTaskResumeAll+0x11c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d05e      	beq.n	8004328 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800426a:	e02f      	b.n	80042cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <xTaskResumeAll+0x120>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3318      	adds	r3, #24
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe ff1b 	bl	80030b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3304      	adds	r3, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe ff16 	bl	80030b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <xTaskResumeAll+0x124>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <xTaskResumeAll+0x7c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <xTaskResumeAll+0x124>)
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <xTaskResumeAll+0x128>)
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f7fe fea1 	bl	8002ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b23      	ldr	r3, [pc, #140]	; (800434c <xTaskResumeAll+0x12c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <xTaskResumeAll+0x130>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <xTaskResumeAll+0x120>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1cb      	bne.n	800426c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042da:	f000 fb55 	bl	8004988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <xTaskResumeAll+0x134>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042ea:	f000 f847 	bl	800437c <xTaskIncrementTick>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <xTaskResumeAll+0x130>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f1      	bne.n	80042ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <xTaskResumeAll+0x134>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <xTaskResumeAll+0x130>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <xTaskResumeAll+0x138>)
 800431a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004328:	f001 fa34 	bl	8005794 <vPortExitCritical>

	return xAlreadyYielded;
 800432c:	68bb      	ldr	r3, [r7, #8]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000c04 	.word	0x20000c04
 800433c:	20000bdc 	.word	0x20000bdc
 8004340:	20000b9c 	.word	0x20000b9c
 8004344:	20000be4 	.word	0x20000be4
 8004348:	2000070c 	.word	0x2000070c
 800434c:	20000708 	.word	0x20000708
 8004350:	20000bf0 	.word	0x20000bf0
 8004354:	20000bec 	.word	0x20000bec
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <xTaskGetTickCount+0x1c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000be0 	.word	0x20000be0

0800437c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004386:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <xTaskIncrementTick+0x148>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 808f 	bne.w	80044ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004390:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <xTaskIncrementTick+0x14c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004398:	4a4b      	ldr	r2, [pc, #300]	; (80044c8 <xTaskIncrementTick+0x14c>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d120      	bne.n	80043e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043a4:	4b49      	ldr	r3, [pc, #292]	; (80044cc <xTaskIncrementTick+0x150>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskIncrementTick+0x46>
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <xTaskIncrementTick+0x150>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <xTaskIncrementTick+0x154>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3f      	ldr	r2, [pc, #252]	; (80044cc <xTaskIncrementTick+0x150>)
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4a3f      	ldr	r2, [pc, #252]	; (80044d0 <xTaskIncrementTick+0x154>)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	4a3d      	ldr	r2, [pc, #244]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	f000 fad1 	bl	8004988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043e6:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <xTaskIncrementTick+0x15c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d349      	bcc.n	8004484 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f0:	4b36      	ldr	r3, [pc, #216]	; (80044cc <xTaskIncrementTick+0x150>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fa:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <xTaskIncrementTick+0x15c>)
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	601a      	str	r2, [r3, #0]
					break;
 8004402:	e03f      	b.n	8004484 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	4b31      	ldr	r3, [pc, #196]	; (80044cc <xTaskIncrementTick+0x150>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d203      	bcs.n	8004424 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800441c:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <xTaskIncrementTick+0x15c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004422:	e02f      	b.n	8004484 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fe43 	bl	80030b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3318      	adds	r3, #24
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fe3a 	bl	80030b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <xTaskIncrementTick+0x160>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d903      	bls.n	8004454 <xTaskIncrementTick+0xd8>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <xTaskIncrementTick+0x160>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <xTaskIncrementTick+0x164>)
 8004462:	441a      	add	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7fe fdc5 	bl	8002ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <xTaskIncrementTick+0x168>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d3b8      	bcc.n	80043f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004482:	e7b5      	b.n	80043f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <xTaskIncrementTick+0x168>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	4915      	ldr	r1, [pc, #84]	; (80044e0 <xTaskIncrementTick+0x164>)
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d901      	bls.n	80044a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <xTaskIncrementTick+0x16c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e004      	b.n	80044b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <xTaskIncrementTick+0x170>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <xTaskIncrementTick+0x170>)
 80044b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044b8:	697b      	ldr	r3, [r7, #20]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000c04 	.word	0x20000c04
 80044c8:	20000be0 	.word	0x20000be0
 80044cc:	20000b94 	.word	0x20000b94
 80044d0:	20000b98 	.word	0x20000b98
 80044d4:	20000bf4 	.word	0x20000bf4
 80044d8:	20000bfc 	.word	0x20000bfc
 80044dc:	20000be4 	.word	0x20000be4
 80044e0:	2000070c 	.word	0x2000070c
 80044e4:	20000708 	.word	0x20000708
 80044e8:	20000bf0 	.word	0x20000bf0
 80044ec:	20000bec 	.word	0x20000bec

080044f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044f6:	4b28      	ldr	r3, [pc, #160]	; (8004598 <vTaskSwitchContext+0xa8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <vTaskSwitchContext+0xac>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004504:	e041      	b.n	800458a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004506:	4b25      	ldr	r3, [pc, #148]	; (800459c <vTaskSwitchContext+0xac>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <vTaskSwitchContext+0xb0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e010      	b.n	8004536 <vTaskSwitchContext+0x46>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <vTaskSwitchContext+0x40>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	607b      	str	r3, [r7, #4]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vTaskSwitchContext+0x3e>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	491b      	ldr	r1, [pc, #108]	; (80045a4 <vTaskSwitchContext+0xb4>)
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0e4      	beq.n	8004514 <vTaskSwitchContext+0x24>
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <vTaskSwitchContext+0xb4>)
 8004556:	4413      	add	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3308      	adds	r3, #8
 800456c:	429a      	cmp	r2, r3
 800456e:	d104      	bne.n	800457a <vTaskSwitchContext+0x8a>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <vTaskSwitchContext+0xb8>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4a06      	ldr	r2, [pc, #24]	; (80045a0 <vTaskSwitchContext+0xb0>)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000c04 	.word	0x20000c04
 800459c:	20000bf0 	.word	0x20000bf0
 80045a0:	20000be4 	.word	0x20000be4
 80045a4:	2000070c 	.word	0x2000070c
 80045a8:	20000708 	.word	0x20000708

080045ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <vTaskPlaceOnEventList+0x44>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3318      	adds	r3, #24
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe fd31 	bl	8003042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045e0:	2101      	movs	r1, #1
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f000 fb7a 	bl	8004cdc <prvAddCurrentTaskToDelayedList>
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000708 	.word	0x20000708

080045f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	617b      	str	r3, [r7, #20]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <vTaskPlaceOnEventListRestricted+0x54>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3318      	adds	r3, #24
 8004622:	4619      	mov	r1, r3
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7fe fce8 	bl	8002ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	68b8      	ldr	r0, [r7, #8]
 800463a:	f000 fb4f 	bl	8004cdc <prvAddCurrentTaskToDelayedList>
	}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000708 	.word	0x20000708

0800464c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60fb      	str	r3, [r7, #12]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3318      	adds	r3, #24
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fd19 	bl	80030b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <xTaskRemoveFromEventList+0xb0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11d      	bne.n	80046c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3304      	adds	r3, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fd10 	bl	80030b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <xTaskRemoveFromEventList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <xTaskRemoveFromEventList+0x5c>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a16      	ldr	r2, [pc, #88]	; (8004700 <xTaskRemoveFromEventList+0xb4>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a13      	ldr	r2, [pc, #76]	; (8004704 <xTaskRemoveFromEventList+0xb8>)
 80046b6:	441a      	add	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe fc9b 	bl	8002ffa <vListInsertEnd>
 80046c4:	e005      	b.n	80046d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4619      	mov	r1, r3
 80046cc:	480e      	ldr	r0, [pc, #56]	; (8004708 <xTaskRemoveFromEventList+0xbc>)
 80046ce:	f7fe fc94 	bl	8002ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <xTaskRemoveFromEventList+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d905      	bls.n	80046ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <xTaskRemoveFromEventList+0xc4>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e001      	b.n	80046f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046f0:	697b      	ldr	r3, [r7, #20]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000c04 	.word	0x20000c04
 8004700:	20000be4 	.word	0x20000be4
 8004704:	2000070c 	.word	0x2000070c
 8004708:	20000b9c 	.word	0x20000b9c
 800470c:	20000708 	.word	0x20000708
 8004710:	20000bf0 	.word	0x20000bf0

08004714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <vTaskInternalSetTimeOutState+0x24>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <vTaskInternalSetTimeOutState+0x28>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	605a      	str	r2, [r3, #4]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000bf4 	.word	0x20000bf4
 800473c:	20000be0 	.word	0x20000be0

08004740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	613b      	str	r3, [r7, #16]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004782:	f000 ffd7 	bl	8005734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <xTaskCheckForTimeOut+0xbc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d102      	bne.n	80047a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	e023      	b.n	80047ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <xTaskCheckForTimeOut+0xc0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d007      	beq.n	80047c2 <xTaskCheckForTimeOut+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e015      	b.n	80047ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d20b      	bcs.n	80047e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff9b 	bl	8004714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e004      	b.n	80047ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047ee:	f000 ffd1 	bl	8005794 <vPortExitCritical>

	return xReturn;
 80047f2:	69fb      	ldr	r3, [r7, #28]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000be0 	.word	0x20000be0
 8004800:	20000bf4 	.word	0x20000bf4

08004804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <vTaskMissedYield+0x14>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000bf0 	.word	0x20000bf0

0800481c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004824:	f000 f852 	bl	80048cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvIdleTask+0x28>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d9f9      	bls.n	8004824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <prvIdleTask+0x2c>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004840:	e7f0      	b.n	8004824 <prvIdleTask+0x8>
 8004842:	bf00      	nop
 8004844:	2000070c 	.word	0x2000070c
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e00c      	b.n	8004872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <prvInitialiseTaskLists+0x60>)
 8004864:	4413      	add	r3, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fb9a 	bl	8002fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b37      	cmp	r3, #55	; 0x37
 8004876:	d9ef      	bls.n	8004858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800487a:	f7fe fb91 	bl	8002fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800487e:	480d      	ldr	r0, [pc, #52]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 8004880:	f7fe fb8e 	bl	8002fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004884:	480c      	ldr	r0, [pc, #48]	; (80048b8 <prvInitialiseTaskLists+0x6c>)
 8004886:	f7fe fb8b 	bl	8002fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <prvInitialiseTaskLists+0x70>)
 800488c:	f7fe fb88 	bl	8002fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004890:	480b      	ldr	r0, [pc, #44]	; (80048c0 <prvInitialiseTaskLists+0x74>)
 8004892:	f7fe fb85 	bl	8002fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvInitialiseTaskLists+0x78>)
 8004898:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800489a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvInitialiseTaskLists+0x7c>)
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000070c 	.word	0x2000070c
 80048b0:	20000b6c 	.word	0x20000b6c
 80048b4:	20000b80 	.word	0x20000b80
 80048b8:	20000b9c 	.word	0x20000b9c
 80048bc:	20000bb0 	.word	0x20000bb0
 80048c0:	20000bc8 	.word	0x20000bc8
 80048c4:	20000b94 	.word	0x20000b94
 80048c8:	20000b98 	.word	0x20000b98

080048cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048d2:	e019      	b.n	8004908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048d4:	f000 ff2e 	bl	8005734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <prvCheckTasksWaitingTermination+0x50>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fbe5 	bl	80030b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <prvCheckTasksWaitingTermination+0x54>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <prvCheckTasksWaitingTermination+0x54>)
 80048f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 80048fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048fe:	f000 ff49 	bl	8005794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f810 	bl	8004928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e1      	bne.n	80048d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000bb0 	.word	0x20000bb0
 8004920:	20000bdc 	.word	0x20000bdc
 8004924:	20000bc4 	.word	0x20000bc4

08004928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4618      	mov	r0, r3
 8004940:	f001 f8e6 	bl	8005b10 <vPortFree>
				vPortFree( pxTCB );
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f8e3 	bl	8005b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800494a:	e018      	b.n	800497e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004952:	2b01      	cmp	r3, #1
 8004954:	d103      	bne.n	800495e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 f8da 	bl	8005b10 <vPortFree>
	}
 800495c:	e00f      	b.n	800497e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004964:	2b02      	cmp	r3, #2
 8004966:	d00a      	beq.n	800497e <prvDeleteTCB+0x56>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60fb      	str	r3, [r7, #12]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <prvDeleteTCB+0x54>
	}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <prvResetNextTaskUnblockTime+0x38>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvResetNextTaskUnblockTime+0x3c>)
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049a0:	e008      	b.n	80049b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <prvResetNextTaskUnblockTime+0x38>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <prvResetNextTaskUnblockTime+0x3c>)
 80049b2:	6013      	str	r3, [r2, #0]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	20000b94 	.word	0x20000b94
 80049c4:	20000bfc 	.word	0x20000bfc

080049c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <xTaskGetSchedulerState+0x34>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049d6:	2301      	movs	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	e008      	b.n	80049ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <xTaskGetSchedulerState+0x38>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049e4:	2302      	movs	r3, #2
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	e001      	b.n	80049ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ee:	687b      	ldr	r3, [r7, #4]
	}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	20000be8 	.word	0x20000be8
 8004a00:	20000c04 	.word	0x20000c04

08004a04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d051      	beq.n	8004abe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <xTaskPriorityInherit+0xc4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d241      	bcs.n	8004aac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db06      	blt.n	8004a3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <xTaskPriorityInherit+0xc4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6959      	ldr	r1, [r3, #20]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <xTaskPriorityInherit+0xc8>)
 8004a50:	4413      	add	r3, r2
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d122      	bne.n	8004a9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fb2a 	bl	80030b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <xTaskPriorityInherit+0xc4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <xTaskPriorityInherit+0xcc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d903      	bls.n	8004a7e <xTaskPriorityInherit+0x7a>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <xTaskPriorityInherit+0xcc>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <xTaskPriorityInherit+0xc8>)
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7fe fab0 	bl	8002ffa <vListInsertEnd>
 8004a9a:	e004      	b.n	8004aa6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <xTaskPriorityInherit+0xc4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e008      	b.n	8004abe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <xTaskPriorityInherit+0xc4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d201      	bcs.n	8004abe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004abe:	68fb      	ldr	r3, [r7, #12]
	}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000708 	.word	0x20000708
 8004acc:	2000070c 	.word	0x2000070c
 8004ad0:	20000be4 	.word	0x20000be4

08004ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d056      	beq.n	8004b98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <xTaskPriorityDisinherit+0xd0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d00a      	beq.n	8004b0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d02c      	beq.n	8004b98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d128      	bne.n	8004b98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fab2 	bl	80030b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <xTaskPriorityDisinherit+0xd4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d903      	bls.n	8004b78 <xTaskPriorityDisinherit+0xa4>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <xTaskPriorityDisinherit+0xd4>)
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <xTaskPriorityDisinherit+0xd8>)
 8004b86:	441a      	add	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fe fa33 	bl	8002ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b98:	697b      	ldr	r3, [r7, #20]
	}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000708 	.word	0x20000708
 8004ba8:	20000be4 	.word	0x20000be4
 8004bac:	2000070c 	.word	0x2000070c

08004bb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d06a      	beq.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e002      	b.n	8004bfc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d04b      	beq.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d146      	bne.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004c10:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10a      	bne.n	8004c30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db04      	blt.n	8004c4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	6959      	ldr	r1, [r3, #20]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004c5e:	4413      	add	r3, r2
 8004c60:	4299      	cmp	r1, r3
 8004c62:	d11c      	bne.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fa23 	bl	80030b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d903      	bls.n	8004c82 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4a07      	ldr	r2, [pc, #28]	; (8004cac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004c90:	441a      	add	r2, r3
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe f9ae 	bl	8002ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c9e:	bf00      	nop
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000708 	.word	0x20000708
 8004cac:	2000070c 	.word	0x2000070c
 8004cb0:	20000be4 	.word	0x20000be4

08004cb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc6:	3201      	adds	r2, #1
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004cca:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
	}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000708 	.word	0x20000708

08004cdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe f9de 	bl	80030b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d10a      	bne.n	8004d16 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4819      	ldr	r0, [pc, #100]	; (8004d74 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d10:	f7fe f973 	bl	8002ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d14:	e026      	b.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d209      	bcs.n	8004d42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fe f981 	bl	8003042 <vListInsert>
}
 8004d40:	e010      	b.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7fe f977 	bl	8003042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d202      	bcs.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6013      	str	r3, [r2, #0]
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000be0 	.word	0x20000be0
 8004d70:	20000708 	.word	0x20000708
 8004d74:	20000bc8 	.word	0x20000bc8
 8004d78:	20000b98 	.word	0x20000b98
 8004d7c:	20000b94 	.word	0x20000b94
 8004d80:	20000bfc 	.word	0x20000bfc

08004d84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d8e:	f000 fb63 	bl	8005458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <xTimerCreateTimerTask+0x80>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d021      	beq.n	8004dde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004da2:	1d3a      	adds	r2, r7, #4
 8004da4:	f107 0108 	add.w	r1, r7, #8
 8004da8:	f107 030c 	add.w	r3, r7, #12
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe f8dd 	bl	8002f6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	9202      	str	r2, [sp, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	4910      	ldr	r1, [pc, #64]	; (8004e08 <xTimerCreateTimerTask+0x84>)
 8004dc6:	4811      	ldr	r0, [pc, #68]	; (8004e0c <xTimerCreateTimerTask+0x88>)
 8004dc8:	f7fe ffe8 	bl	8003d9c <xTaskCreateStatic>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <xTimerCreateTimerTask+0x8c>)
 8004dd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <xTimerCreateTimerTask+0x8c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	613b      	str	r3, [r7, #16]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dfa:	697b      	ldr	r3, [r7, #20]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000c38 	.word	0x20000c38
 8004e08:	08005e60 	.word	0x08005e60
 8004e0c:	08005001 	.word	0x08005001
 8004e10:	20000c3c 	.word	0x20000c3c

08004e14 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004e22:	202c      	movs	r0, #44	; 0x2c
 8004e24:	f000 fda8 	bl	8005978 <pvPortMalloc>
 8004e28:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f805 	bl	8004e56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004e4c:	697b      	ldr	r3, [r7, #20]
	}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	617b      	str	r3, [r7, #20]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01e      	beq.n	8004ec4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004e86:	f000 fae7 	bl	8005458 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe f89a 	bl	8002fe0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	623b      	str	r3, [r7, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <xTimerGenericCommand+0x98>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d02a      	beq.n	8004f58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	dc18      	bgt.n	8004f46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f14:	f7ff fd58 	bl	80049c8 <xTaskGetSchedulerState>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d109      	bne.n	8004f32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <xTimerGenericCommand+0x98>)
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	f107 0110 	add.w	r1, r7, #16
 8004f26:	2300      	movs	r3, #0
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	f7fe fa2b 	bl	8003384 <xQueueGenericSend>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f30:	e012      	b.n	8004f58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <xTimerGenericCommand+0x98>)
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	f107 0110 	add.w	r1, r7, #16
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f7fe fa21 	bl	8003384 <xQueueGenericSend>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24
 8004f44:	e008      	b.n	8004f58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <xTimerGenericCommand+0x98>)
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	f107 0110 	add.w	r1, r7, #16
 8004f4e:	2300      	movs	r3, #0
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	f7fe fb15 	bl	8003580 <xQueueGenericSendFromISR>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3728      	adds	r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000c38 	.word	0x20000c38

08004f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <prvProcessExpiredTimer+0x94>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe f897 	bl	80030b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	18d1      	adds	r1, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	6978      	ldr	r0, [r7, #20]
 8004fa2:	f000 f8d1 	bl	8005148 <prvInsertTimerInActiveList>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01f      	beq.n	8004fec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fac:	2300      	movs	r3, #0
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f7ff ff88 	bl	8004ecc <xTimerGenericCommand>
 8004fbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d113      	bne.n	8004fec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60fb      	str	r3, [r7, #12]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	4798      	blx	r3
}
 8004ff4:	bf00      	nop
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000c30 	.word	0x20000c30

08005000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f857 	bl	80050c0 <prvGetNextExpireTime>
 8005012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f803 	bl	8005024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800501e:	f000 f8d5 	bl	80051cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005022:	e7f1      	b.n	8005008 <prvTimerTask+0x8>

08005024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800502e:	f7ff f8e9 	bl	8004204 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f866 	bl	8005108 <prvSampleTimeNow>
 800503c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d130      	bne.n	80050a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <prvProcessTimerOrBlockTask+0x3c>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	429a      	cmp	r2, r3
 8005050:	d806      	bhi.n	8005060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005052:	f7ff f8e5 	bl	8004220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff85 	bl	8004f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800505e:	e024      	b.n	80050aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <prvProcessTimerOrBlockTask+0x90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <prvProcessTimerOrBlockTask+0x50>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <prvProcessTimerOrBlockTask+0x52>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <prvProcessTimerOrBlockTask+0x94>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	f7fe fe55 	bl	8003d34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800508a:	f7ff f8c9 	bl	8004220 <xTaskResumeAll>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <prvProcessTimerOrBlockTask+0x98>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
}
 80050a4:	e001      	b.n	80050aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050a6:	f7ff f8bb 	bl	8004220 <xTaskResumeAll>
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000c34 	.word	0x20000c34
 80050b8:	20000c38 	.word	0x20000c38
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <prvGetNextExpireTime+0x44>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <prvGetNextExpireTime+0x16>
 80050d2:	2201      	movs	r2, #1
 80050d4:	e000      	b.n	80050d8 <prvGetNextExpireTime+0x18>
 80050d6:	2200      	movs	r2, #0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <prvGetNextExpireTime+0x44>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e001      	b.n	80050f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000c30 	.word	0x20000c30

08005108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005110:	f7ff f924 	bl	800435c <xTaskGetTickCount>
 8005114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <prvSampleTimeNow+0x3c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d205      	bcs.n	800512c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005120:	f000 f936 	bl	8005390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e002      	b.n	8005132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005132:	4a04      	ldr	r2, [pc, #16]	; (8005144 <prvSampleTimeNow+0x3c>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000c40 	.word	0x20000c40

08005148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d812      	bhi.n	8005194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e01b      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <prvInsertTimerInActiveList+0x7c>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fd ff58 	bl	8003042 <vListInsert>
 8005192:	e012      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d206      	bcs.n	80051aa <prvInsertTimerInActiveList+0x62>
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d302      	bcc.n	80051aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e007      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <prvInsertTimerInActiveList+0x80>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fd ff44 	bl	8003042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000c34 	.word	0x20000c34
 80051c8:	20000c30 	.word	0x20000c30

080051cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08e      	sub	sp, #56	; 0x38
 80051d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051d2:	e0ca      	b.n	800536a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da18      	bge.n	800520c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	3304      	adds	r3, #4
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61fb      	str	r3, [r7, #28]
}
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005202:	6850      	ldr	r0, [r2, #4]
 8005204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005206:	6892      	ldr	r2, [r2, #8]
 8005208:	4611      	mov	r1, r2
 800520a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f2c0 80aa 	blt.w	8005368 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd ff45 	bl	80030b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800522a:	463b      	mov	r3, r7
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff ff6b 	bl	8005108 <prvSampleTimeNow>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b09      	cmp	r3, #9
 8005238:	f200 8097 	bhi.w	800536a <prvProcessReceivedCommands+0x19e>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <prvProcessReceivedCommands+0x78>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	0800526d 	.word	0x0800526d
 8005248:	0800526d 	.word	0x0800526d
 800524c:	0800526d 	.word	0x0800526d
 8005250:	080052e1 	.word	0x080052e1
 8005254:	080052f5 	.word	0x080052f5
 8005258:	0800533f 	.word	0x0800533f
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800526d 	.word	0x0800526d
 8005264:	080052e1 	.word	0x080052e1
 8005268:	080052f5 	.word	0x080052f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	18d1      	adds	r1, r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528c:	f7ff ff5c 	bl	8005148 <prvInsertTimerInActiveList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d069      	beq.n	800536a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05e      	beq.n	800536a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	441a      	add	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	2100      	movs	r1, #0
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f7ff fe05 	bl	8004ecc <xTimerGenericCommand>
 80052c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d14f      	bne.n	800536a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	61bb      	str	r3, [r7, #24]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80052f2:	e03a      	b.n	800536a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	617b      	str	r3, [r7, #20]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	18d1      	adds	r1, r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005338:	f7ff ff06 	bl	8005148 <prvInsertTimerInActiveList>
					break;
 800533c:	e015      	b.n	800536a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f000 fbdf 	bl	8005b10 <vPortFree>
 8005352:	e00a      	b.n	800536a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005366:	e000      	b.n	800536a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <prvProcessReceivedCommands+0x1c0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1d39      	adds	r1, r7, #4
 8005370:	2200      	movs	r2, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe f9a0 	bl	80036b8 <xQueueReceive>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	f47f af2a 	bne.w	80051d4 <prvProcessReceivedCommands+0x8>
	}
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3730      	adds	r7, #48	; 0x30
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000c38 	.word	0x20000c38

08005390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005396:	e048      	b.n	800542a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <prvSwitchTimerLists+0xc0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a2:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <prvSwitchTimerLists+0xc0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fd fe7f 	bl	80030b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02e      	beq.n	800542a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d90e      	bls.n	80053fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <prvSwitchTimerLists+0xc0>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7fd fe24 	bl	8003042 <vListInsert>
 80053fa:	e016      	b.n	800542a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2300      	movs	r3, #0
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	2100      	movs	r1, #0
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fd60 	bl	8004ecc <xTimerGenericCommand>
 800540c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	603b      	str	r3, [r7, #0]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <prvSwitchTimerLists+0xc0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1b1      	bne.n	8005398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <prvSwitchTimerLists+0xc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <prvSwitchTimerLists+0xc4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a04      	ldr	r2, [pc, #16]	; (8005450 <prvSwitchTimerLists+0xc0>)
 8005440:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005442:	4a04      	ldr	r2, [pc, #16]	; (8005454 <prvSwitchTimerLists+0xc4>)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	6013      	str	r3, [r2, #0]
}
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000c30 	.word	0x20000c30
 8005454:	20000c34 	.word	0x20000c34

08005458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800545e:	f000 f969 	bl	8005734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <prvCheckForValidListAndQueue+0x60>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d120      	bne.n	80054ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800546a:	4814      	ldr	r0, [pc, #80]	; (80054bc <prvCheckForValidListAndQueue+0x64>)
 800546c:	f7fd fd98 	bl	8002fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005470:	4813      	ldr	r0, [pc, #76]	; (80054c0 <prvCheckForValidListAndQueue+0x68>)
 8005472:	f7fd fd95 	bl	8002fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <prvCheckForValidListAndQueue+0x6c>)
 8005478:	4a10      	ldr	r2, [pc, #64]	; (80054bc <prvCheckForValidListAndQueue+0x64>)
 800547a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800547c:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <prvCheckForValidListAndQueue+0x70>)
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <prvCheckForValidListAndQueue+0x68>)
 8005480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4b11      	ldr	r3, [pc, #68]	; (80054cc <prvCheckForValidListAndQueue+0x74>)
 8005488:	4a11      	ldr	r2, [pc, #68]	; (80054d0 <prvCheckForValidListAndQueue+0x78>)
 800548a:	2110      	movs	r1, #16
 800548c:	200a      	movs	r0, #10
 800548e:	f7fd fea3 	bl	80031d8 <xQueueGenericCreateStatic>
 8005492:	4603      	mov	r3, r0
 8005494:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <prvCheckForValidListAndQueue+0x60>)
 8005496:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <prvCheckForValidListAndQueue+0x60>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <prvCheckForValidListAndQueue+0x60>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	490b      	ldr	r1, [pc, #44]	; (80054d4 <prvCheckForValidListAndQueue+0x7c>)
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fc1a 	bl	8003ce0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054ac:	f000 f972 	bl	8005794 <vPortExitCritical>
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000c38 	.word	0x20000c38
 80054bc:	20000c08 	.word	0x20000c08
 80054c0:	20000c1c 	.word	0x20000c1c
 80054c4:	20000c30 	.word	0x20000c30
 80054c8:	20000c34 	.word	0x20000c34
 80054cc:	20000ce4 	.word	0x20000ce4
 80054d0:	20000c44 	.word	0x20000c44
 80054d4:	08005e68 	.word	0x08005e68

080054d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3b04      	subs	r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b04      	subs	r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3b04      	subs	r3, #4
 8005506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005508:	4a0c      	ldr	r2, [pc, #48]	; (800553c <pxPortInitialiseStack+0x64>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3b14      	subs	r3, #20
 8005512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b04      	subs	r3, #4
 800551e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f06f 0202 	mvn.w	r2, #2
 8005526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3b20      	subs	r3, #32
 800552c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	08005541 	.word	0x08005541

08005540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <prvTaskExitError+0x54>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d00a      	beq.n	800556a <prvTaskExitError+0x2a>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <prvTaskExitError+0x28>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60bb      	str	r3, [r7, #8]
}
 800557c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800557e:	bf00      	nop
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0fc      	beq.n	8005580 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	2000002c 	.word	0x2000002c
	...

080055a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <pxCurrentTCBConst2>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	f380 8809 	msr	PSP, r0
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	4770      	bx	lr
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst2>:
 80055c0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055c8:	4808      	ldr	r0, [pc, #32]	; (80055ec <prvPortStartFirstTask+0x24>)
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f380 8808 	msr	MSP, r0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8814 	msr	CONTROL, r0
 80055da:	b662      	cpsie	i
 80055dc:	b661      	cpsie	f
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	df00      	svc	0
 80055e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ea:	bf00      	nop
 80055ec:	e000ed08 	.word	0xe000ed08

080055f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <xPortStartScheduler+0x120>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a46      	ldr	r2, [pc, #280]	; (8005714 <xPortStartScheduler+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10a      	bne.n	8005616 <xPortStartScheduler+0x26>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <xPortStartScheduler+0x120>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a3f      	ldr	r2, [pc, #252]	; (8005718 <xPortStartScheduler+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10a      	bne.n	8005636 <xPortStartScheduler+0x46>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <xPortStartScheduler+0x12c>)
 8005638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <xPortStartScheduler+0x130>)
 800565c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800565e:	4b31      	ldr	r3, [pc, #196]	; (8005724 <xPortStartScheduler+0x134>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005664:	e009      	b.n	800567a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005666:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <xPortStartScheduler+0x134>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3b01      	subs	r3, #1
 800566c:	4a2d      	ldr	r2, [pc, #180]	; (8005724 <xPortStartScheduler+0x134>)
 800566e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d0ef      	beq.n	8005666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <xPortStartScheduler+0x134>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	d00a      	beq.n	80056a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60bb      	str	r3, [r7, #8]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <xPortStartScheduler+0x134>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <xPortStartScheduler+0x134>)
 80056b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <xPortStartScheduler+0x134>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <xPortStartScheduler+0x134>)
 80056bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <xPortStartScheduler+0x138>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <xPortStartScheduler+0x138>)
 80056cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <xPortStartScheduler+0x138>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a14      	ldr	r2, [pc, #80]	; (8005728 <xPortStartScheduler+0x138>)
 80056d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056de:	f000 f8dd 	bl	800589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <xPortStartScheduler+0x13c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056e8:	f000 f8fc 	bl	80058e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056ec:	4b10      	ldr	r3, [pc, #64]	; (8005730 <xPortStartScheduler+0x140>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <xPortStartScheduler+0x140>)
 80056f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056f8:	f7ff ff66 	bl	80055c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056fc:	f7fe fef8 	bl	80044f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005700:	f7ff ff1e 	bl	8005540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000ed00 	.word	0xe000ed00
 8005714:	410fc271 	.word	0x410fc271
 8005718:	410fc270 	.word	0x410fc270
 800571c:	e000e400 	.word	0xe000e400
 8005720:	20000d34 	.word	0x20000d34
 8005724:	20000d38 	.word	0x20000d38
 8005728:	e000ed20 	.word	0xe000ed20
 800572c:	2000002c 	.word	0x2000002c
 8005730:	e000ef34 	.word	0xe000ef34

08005734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	607b      	str	r3, [r7, #4]
}
 800574c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <vPortEnterCritical+0x58>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <vPortEnterCritical+0x58>)
 8005756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <vPortEnterCritical+0x58>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10f      	bne.n	8005780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortEnterCritical+0x5c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <vPortEnterCritical+0x4c>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	603b      	str	r3, [r7, #0]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <vPortEnterCritical+0x4a>
	}
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	2000002c 	.word	0x2000002c
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <vPortExitCritical+0x50>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vPortExitCritical+0x24>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	607b      	str	r3, [r7, #4]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vPortExitCritical+0x50>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <vPortExitCritical+0x50>)
 80057c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <vPortExitCritical+0x50>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <vPortExitCritical+0x42>
 80057ca:	2300      	movs	r3, #0
 80057cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f383 8811 	msr	BASEPRI, r3
}
 80057d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	2000002c 	.word	0x2000002c
	...

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7fe fe66 	bl	80044f0 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7fe fd83 	bl	800437c <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <xPortSysTickHandler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <vPortSetupTimerInterrupt+0x44>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010
 80058d4:	e000e018 	.word	0xe000e018
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	e000e014 	.word	0xe000e014

080058e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058f4 <vPortEnableVFP+0x10>
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ee:	6001      	str	r1, [r0, #0]
 80058f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058f2:	bf00      	nop
 80058f4:	e000ed88 	.word	0xe000ed88

080058f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d914      	bls.n	8005934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <vPortValidateInterruptPriority+0x70>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005914:	4b15      	ldr	r3, [pc, #84]	; (800596c <vPortValidateInterruptPriority+0x74>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	7afa      	ldrb	r2, [r7, #11]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20a      	bcs.n	8005934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <vPortValidateInterruptPriority+0x78>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <vPortValidateInterruptPriority+0x7c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d90a      	bls.n	800595a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	603b      	str	r3, [r7, #0]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <vPortValidateInterruptPriority+0x60>
	}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	e000e3f0 	.word	0xe000e3f0
 800596c:	20000d34 	.word	0x20000d34
 8005970:	e000ed0c 	.word	0xe000ed0c
 8005974:	20000d38 	.word	0x20000d38

08005978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005984:	f7fe fc3e 	bl	8004204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005988:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <pvPortMalloc+0x180>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005990:	f000 f920 	bl	8005bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <pvPortMalloc+0x184>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8093 	bne.w	8005ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01d      	beq.n	80059e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059a8:	2208      	movs	r2, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f023 0307 	bic.w	r3, r3, #7
 80059c0:	3308      	adds	r3, #8
 80059c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <pvPortMalloc+0x6c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d06e      	beq.n	8005ac8 <pvPortMalloc+0x150>
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <pvPortMalloc+0x188>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d869      	bhi.n	8005ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059f4:	4b43      	ldr	r3, [pc, #268]	; (8005b04 <pvPortMalloc+0x18c>)
 80059f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <pvPortMalloc+0x18c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059fe:	e004      	b.n	8005a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d903      	bls.n	8005a1c <pvPortMalloc+0xa4>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f1      	bne.n	8005a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <pvPortMalloc+0x180>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d050      	beq.n	8005ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	2308      	movs	r3, #8
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d91f      	bls.n	8005a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <pvPortMalloc+0xf8>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	613b      	str	r3, [r7, #16]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a82:	69b8      	ldr	r0, [r7, #24]
 8005a84:	f000 f908 	bl	8005c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <pvPortMalloc+0x188>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <pvPortMalloc+0x188>)
 8005a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <pvPortMalloc+0x188>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <pvPortMalloc+0x190>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d203      	bcs.n	8005aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <pvPortMalloc+0x188>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <pvPortMalloc+0x190>)
 8005aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <pvPortMalloc+0x184>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ac8:	f7fe fbaa 	bl	8004220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <pvPortMalloc+0x174>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <pvPortMalloc+0x172>
	return pvReturn;
 8005aec:	69fb      	ldr	r3, [r7, #28]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20004944 	.word	0x20004944
 8005afc:	20004958 	.word	0x20004958
 8005b00:	20004948 	.word	0x20004948
 8005b04:	2000493c 	.word	0x2000493c
 8005b08:	2000494c 	.word	0x2000494c
 8005b0c:	20004950 	.word	0x20004950

08005b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04d      	beq.n	8005bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b22:	2308      	movs	r3, #8
 8005b24:	425b      	negs	r3, r3
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <vPortFree+0xb8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <vPortFree+0x44>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <vPortFree+0x62>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60bb      	str	r3, [r7, #8]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <vPortFree+0xb8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11a      	bne.n	8005bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <vPortFree+0xb8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	401a      	ands	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b98:	f7fe fb34 	bl	8004204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vPortFree+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <vPortFree+0xbc>)
 8005ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005baa:	6938      	ldr	r0, [r7, #16]
 8005bac:	f000 f874 	bl	8005c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <vPortFree+0xc0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <vPortFree+0xc0>)
 8005bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bba:	f7fe fb31 	bl	8004220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20004958 	.word	0x20004958
 8005bcc:	20004948 	.word	0x20004948
 8005bd0:	20004954 	.word	0x20004954

08005bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <prvHeapInit+0xac>)
 8005be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <prvHeapInit+0xac>)
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <prvHeapInit+0xb0>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <prvHeapInit+0xb0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <prvHeapInit+0xb4>)
 8005c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <prvHeapInit+0xb4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvHeapInit+0xb4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <prvHeapInit+0xb4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <prvHeapInit+0xb8>)
 8005c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <prvHeapInit+0xbc>)
 8005c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <prvHeapInit+0xc0>)
 8005c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000d3c 	.word	0x20000d3c
 8005c84:	2000493c 	.word	0x2000493c
 8005c88:	20004944 	.word	0x20004944
 8005c8c:	2000494c 	.word	0x2000494c
 8005c90:	20004948 	.word	0x20004948
 8005c94:	20004958 	.word	0x20004958

08005c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <prvInsertBlockIntoFreeList+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <prvInsertBlockIntoFreeList+0x14>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d8f7      	bhi.n	8005ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d108      	bne.n	8005cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d118      	bne.n	8005d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d00d      	beq.n	8005d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e008      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d002      	beq.n	8005d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000493c 	.word	0x2000493c
 8005d48:	20004944 	.word	0x20004944

08005d4c <__libc_init_array>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4d0d      	ldr	r5, [pc, #52]	; (8005d84 <__libc_init_array+0x38>)
 8005d50:	4c0d      	ldr	r4, [pc, #52]	; (8005d88 <__libc_init_array+0x3c>)
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	2600      	movs	r6, #0
 8005d58:	42a6      	cmp	r6, r4
 8005d5a:	d109      	bne.n	8005d70 <__libc_init_array+0x24>
 8005d5c:	4d0b      	ldr	r5, [pc, #44]	; (8005d8c <__libc_init_array+0x40>)
 8005d5e:	4c0c      	ldr	r4, [pc, #48]	; (8005d90 <__libc_init_array+0x44>)
 8005d60:	f000 f82e 	bl	8005dc0 <_init>
 8005d64:	1b64      	subs	r4, r4, r5
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	2600      	movs	r6, #0
 8005d6a:	42a6      	cmp	r6, r4
 8005d6c:	d105      	bne.n	8005d7a <__libc_init_array+0x2e>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d74:	4798      	blx	r3
 8005d76:	3601      	adds	r6, #1
 8005d78:	e7ee      	b.n	8005d58 <__libc_init_array+0xc>
 8005d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7e:	4798      	blx	r3
 8005d80:	3601      	adds	r6, #1
 8005d82:	e7f2      	b.n	8005d6a <__libc_init_array+0x1e>
 8005d84:	08005e90 	.word	0x08005e90
 8005d88:	08005e90 	.word	0x08005e90
 8005d8c:	08005e90 	.word	0x08005e90
 8005d90:	08005e94 	.word	0x08005e94

08005d94 <memcpy>:
 8005d94:	440a      	add	r2, r1
 8005d96:	4291      	cmp	r1, r2
 8005d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d9c:	d100      	bne.n	8005da0 <memcpy+0xc>
 8005d9e:	4770      	bx	lr
 8005da0:	b510      	push	{r4, lr}
 8005da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005daa:	4291      	cmp	r1, r2
 8005dac:	d1f9      	bne.n	8005da2 <memcpy+0xe>
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <memset>:
 8005db0:	4402      	add	r2, r0
 8005db2:	4603      	mov	r3, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
